/*
 * ChannelEngine Merchant API
 *
 * ChannelEngine API for merchants
 *
 * The version of the OpenAPI document: 2.9.9
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ChannelEngine.Merchant.ApiClient.Client.OpenAPIDateConverter;

namespace ChannelEngine.Merchant.ApiClient.Model
{
    /// <summary>
    /// MerchantShipmentLabelCarrierRequest
    /// </summary>
    [DataContract(Name = "MerchantShipmentLabelCarrierRequest")]
    public partial class MerchantShipmentLabelCarrierRequest : IEquatable<MerchantShipmentLabelCarrierRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantShipmentLabelCarrierRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MerchantShipmentLabelCarrierRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantShipmentLabelCarrierRequest" /> class.
        /// </summary>
        /// <param name="lines">lines (required).</param>
        /// <param name="dimensions">dimensions (required).</param>
        /// <param name="weight">weight (required).</param>
        public MerchantShipmentLabelCarrierRequest(List<MerchantShipmentLineRequest> lines = default(List<MerchantShipmentLineRequest>), MerchantShipmentPackageDimensionsRequest dimensions = default(MerchantShipmentPackageDimensionsRequest), MerchantShipmentPackageWeightRequest weight = default(MerchantShipmentPackageWeightRequest))
        {
            // to ensure "lines" is required (not null)
            this.Lines = lines ?? throw new ArgumentNullException("lines is a required property for MerchantShipmentLabelCarrierRequest and cannot be null");
            // to ensure "dimensions" is required (not null)
            this.Dimensions = dimensions ?? throw new ArgumentNullException("dimensions is a required property for MerchantShipmentLabelCarrierRequest and cannot be null");
            // to ensure "weight" is required (not null)
            this.Weight = weight ?? throw new ArgumentNullException("weight is a required property for MerchantShipmentLabelCarrierRequest and cannot be null");
        }

        /// <summary>
        /// Gets or Sets Lines
        /// </summary>
        [DataMember(Name = "Lines", IsRequired = true, EmitDefaultValue = false)]
        public List<MerchantShipmentLineRequest> Lines { get; set; }

        /// <summary>
        /// Gets or Sets Dimensions
        /// </summary>
        [DataMember(Name = "Dimensions", IsRequired = true, EmitDefaultValue = false)]
        public MerchantShipmentPackageDimensionsRequest Dimensions { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name = "Weight", IsRequired = true, EmitDefaultValue = false)]
        public MerchantShipmentPackageWeightRequest Weight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MerchantShipmentLabelCarrierRequest {\n");
            sb.Append("  Lines: ").Append(Lines).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MerchantShipmentLabelCarrierRequest);
        }

        /// <summary>
        /// Returns true if MerchantShipmentLabelCarrierRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of MerchantShipmentLabelCarrierRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MerchantShipmentLabelCarrierRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Lines == input.Lines ||
                    this.Lines != null &&
                    input.Lines != null &&
                    this.Lines.SequenceEqual(input.Lines)
                ) && 
                (
                    this.Dimensions == input.Dimensions ||
                    (this.Dimensions != null &&
                    this.Dimensions.Equals(input.Dimensions))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Lines != null)
                    hashCode = hashCode * 59 + this.Lines.GetHashCode();
                if (this.Dimensions != null)
                    hashCode = hashCode * 59 + this.Dimensions.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

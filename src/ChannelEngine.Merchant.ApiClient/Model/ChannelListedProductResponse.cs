/*
 * ChannelEngine Merchant API
 *
 * ChannelEngine API for merchants
 *
 * The version of the OpenAPI document: 2.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ChannelEngine.Merchant.ApiClient.Client.OpenAPIDateConverter;

namespace ChannelEngine.Merchant.ApiClient.Model
{
    /// <summary>
    /// ChannelListedProductResponse
    /// </summary>
    [DataContract(Name = "ChannelListedProductResponse")]
    public partial class ChannelListedProductResponse : IEquatable<ChannelListedProductResponse>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ChannelStatus
        /// </summary>
        [DataMember(Name = "ChannelStatus", EmitDefaultValue = false)]
        public ListedProductChannelStatus? ChannelStatus { get; set; }

        /// <summary>
        /// Gets or Sets ExportStatus
        /// </summary>
        [DataMember(Name = "ExportStatus", EmitDefaultValue = false)]
        public ListedProductExportStatus? ExportStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelListedProductResponse" /> class.
        /// </summary>
        /// <param name="channelStatus">channelStatus.</param>
        /// <param name="ean">EAN.</param>
        /// <param name="exportStatus">exportStatus.</param>
        /// <param name="merchantProductNo">Your product number (SKU).</param>
        /// <param name="lastExportedPrice">Your product last exported price.</param>
        /// <param name="lastExportedStock">Your product last exported stock.</param>
        public ChannelListedProductResponse(ListedProductChannelStatus? channelStatus = default(ListedProductChannelStatus?), string ean = default(string), ListedProductExportStatus? exportStatus = default(ListedProductExportStatus?), string merchantProductNo = default(string), decimal? lastExportedPrice = default(decimal?), int? lastExportedStock = default(int?))
        {
            this.ChannelStatus = channelStatus;
            this.Ean = ean;
            this.ExportStatus = exportStatus;
            this.MerchantProductNo = merchantProductNo;
            this.LastExportedPrice = lastExportedPrice;
            this.LastExportedStock = lastExportedStock;
        }

        /// <summary>
        /// EAN
        /// </summary>
        /// <value>EAN</value>
        [DataMember(Name = "Ean", EmitDefaultValue = true)]
        public string Ean { get; set; }

        /// <summary>
        /// Your product number (SKU)
        /// </summary>
        /// <value>Your product number (SKU)</value>
        [DataMember(Name = "MerchantProductNo", EmitDefaultValue = true)]
        public string MerchantProductNo { get; set; }

        /// <summary>
        /// Your product last exported price
        /// </summary>
        /// <value>Your product last exported price</value>
        [DataMember(Name = "LastExportedPrice", EmitDefaultValue = true)]
        public decimal? LastExportedPrice { get; set; }

        /// <summary>
        /// Your product last exported stock
        /// </summary>
        /// <value>Your product last exported stock</value>
        [DataMember(Name = "LastExportedStock", EmitDefaultValue = true)]
        public int? LastExportedStock { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChannelListedProductResponse {\n");
            sb.Append("  ChannelStatus: ").Append(ChannelStatus).Append("\n");
            sb.Append("  Ean: ").Append(Ean).Append("\n");
            sb.Append("  ExportStatus: ").Append(ExportStatus).Append("\n");
            sb.Append("  MerchantProductNo: ").Append(MerchantProductNo).Append("\n");
            sb.Append("  LastExportedPrice: ").Append(LastExportedPrice).Append("\n");
            sb.Append("  LastExportedStock: ").Append(LastExportedStock).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChannelListedProductResponse);
        }

        /// <summary>
        /// Returns true if ChannelListedProductResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ChannelListedProductResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChannelListedProductResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ChannelStatus == input.ChannelStatus ||
                    this.ChannelStatus.Equals(input.ChannelStatus)
                ) && 
                (
                    this.Ean == input.Ean ||
                    (this.Ean != null &&
                    this.Ean.Equals(input.Ean))
                ) && 
                (
                    this.ExportStatus == input.ExportStatus ||
                    this.ExportStatus.Equals(input.ExportStatus)
                ) && 
                (
                    this.MerchantProductNo == input.MerchantProductNo ||
                    (this.MerchantProductNo != null &&
                    this.MerchantProductNo.Equals(input.MerchantProductNo))
                ) && 
                (
                    this.LastExportedPrice == input.LastExportedPrice ||
                    (this.LastExportedPrice != null &&
                    this.LastExportedPrice.Equals(input.LastExportedPrice))
                ) && 
                (
                    this.LastExportedStock == input.LastExportedStock ||
                    (this.LastExportedStock != null &&
                    this.LastExportedStock.Equals(input.LastExportedStock))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.ChannelStatus.GetHashCode();
                if (this.Ean != null)
                    hashCode = hashCode * 59 + this.Ean.GetHashCode();
                hashCode = hashCode * 59 + this.ExportStatus.GetHashCode();
                if (this.MerchantProductNo != null)
                    hashCode = hashCode * 59 + this.MerchantProductNo.GetHashCode();
                if (this.LastExportedPrice != null)
                    hashCode = hashCode * 59 + this.LastExportedPrice.GetHashCode();
                if (this.LastExportedStock != null)
                    hashCode = hashCode * 59 + this.LastExportedStock.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

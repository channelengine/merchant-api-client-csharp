/*
 * ChannelEngine Merchant API
 *
 * ChannelEngine API for merchants
 *
 * The version of the OpenAPI document: 2.9.10
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ChannelEngine.Merchant.ApiClient.Client.OpenAPIDateConverter;

namespace ChannelEngine.Merchant.ApiClient.Model
{
    /// <summary>
    /// MerchantShipmentTrackingRequest
    /// </summary>
    [DataContract(Name = "MerchantShipmentTrackingRequest")]
    public partial class MerchantShipmentTrackingRequest : IEquatable<MerchantShipmentTrackingRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantShipmentTrackingRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MerchantShipmentTrackingRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantShipmentTrackingRequest" /> class.
        /// </summary>
        /// <param name="method">Shipment method (carrier). (required).</param>
        /// <param name="trackTraceNo">The unique shipping reference used by the Shipping carrier (track &amp; trace number). (required).</param>
        /// <param name="returnTrackTraceNo">The unique return shipping reference that may be used by the Shipping carrier (track &amp; trace number) if the shipment is returned..</param>
        /// <param name="trackTraceUrl">A link to a page of the carrier where the customer can track the shipping of her package..</param>
        /// <param name="shippedFromCountryCode">The code of the country from where the package is being shipped..</param>
        public MerchantShipmentTrackingRequest(string method = default(string), string trackTraceNo = default(string), string returnTrackTraceNo = default(string), string trackTraceUrl = default(string), string shippedFromCountryCode = default(string))
        {
            // to ensure "method" is required (not null)
            this.Method = method ?? throw new ArgumentNullException("method is a required property for MerchantShipmentTrackingRequest and cannot be null");
            // to ensure "trackTraceNo" is required (not null)
            this.TrackTraceNo = trackTraceNo ?? throw new ArgumentNullException("trackTraceNo is a required property for MerchantShipmentTrackingRequest and cannot be null");
            this.ReturnTrackTraceNo = returnTrackTraceNo;
            this.TrackTraceUrl = trackTraceUrl;
            this.ShippedFromCountryCode = shippedFromCountryCode;
        }

        /// <summary>
        /// Shipment method (carrier).
        /// </summary>
        /// <value>Shipment method (carrier).</value>
        [DataMember(Name = "Method", IsRequired = true, EmitDefaultValue = false)]
        public string Method { get; set; }

        /// <summary>
        /// The unique shipping reference used by the Shipping carrier (track &amp; trace number).
        /// </summary>
        /// <value>The unique shipping reference used by the Shipping carrier (track &amp; trace number).</value>
        [DataMember(Name = "TrackTraceNo", IsRequired = true, EmitDefaultValue = false)]
        public string TrackTraceNo { get; set; }

        /// <summary>
        /// The unique return shipping reference that may be used by the Shipping carrier (track &amp; trace number) if the shipment is returned.
        /// </summary>
        /// <value>The unique return shipping reference that may be used by the Shipping carrier (track &amp; trace number) if the shipment is returned.</value>
        [DataMember(Name = "ReturnTrackTraceNo", EmitDefaultValue = true)]
        public string ReturnTrackTraceNo { get; set; }

        /// <summary>
        /// A link to a page of the carrier where the customer can track the shipping of her package.
        /// </summary>
        /// <value>A link to a page of the carrier where the customer can track the shipping of her package.</value>
        [DataMember(Name = "TrackTraceUrl", EmitDefaultValue = true)]
        public string TrackTraceUrl { get; set; }

        /// <summary>
        /// The code of the country from where the package is being shipped.
        /// </summary>
        /// <value>The code of the country from where the package is being shipped.</value>
        [DataMember(Name = "ShippedFromCountryCode", EmitDefaultValue = true)]
        public string ShippedFromCountryCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MerchantShipmentTrackingRequest {\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  TrackTraceNo: ").Append(TrackTraceNo).Append("\n");
            sb.Append("  ReturnTrackTraceNo: ").Append(ReturnTrackTraceNo).Append("\n");
            sb.Append("  TrackTraceUrl: ").Append(TrackTraceUrl).Append("\n");
            sb.Append("  ShippedFromCountryCode: ").Append(ShippedFromCountryCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MerchantShipmentTrackingRequest);
        }

        /// <summary>
        /// Returns true if MerchantShipmentTrackingRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of MerchantShipmentTrackingRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MerchantShipmentTrackingRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.TrackTraceNo == input.TrackTraceNo ||
                    (this.TrackTraceNo != null &&
                    this.TrackTraceNo.Equals(input.TrackTraceNo))
                ) && 
                (
                    this.ReturnTrackTraceNo == input.ReturnTrackTraceNo ||
                    (this.ReturnTrackTraceNo != null &&
                    this.ReturnTrackTraceNo.Equals(input.ReturnTrackTraceNo))
                ) && 
                (
                    this.TrackTraceUrl == input.TrackTraceUrl ||
                    (this.TrackTraceUrl != null &&
                    this.TrackTraceUrl.Equals(input.TrackTraceUrl))
                ) && 
                (
                    this.ShippedFromCountryCode == input.ShippedFromCountryCode ||
                    (this.ShippedFromCountryCode != null &&
                    this.ShippedFromCountryCode.Equals(input.ShippedFromCountryCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.TrackTraceNo != null)
                    hashCode = hashCode * 59 + this.TrackTraceNo.GetHashCode();
                if (this.ReturnTrackTraceNo != null)
                    hashCode = hashCode * 59 + this.ReturnTrackTraceNo.GetHashCode();
                if (this.TrackTraceUrl != null)
                    hashCode = hashCode * 59 + this.TrackTraceUrl.GetHashCode();
                if (this.ShippedFromCountryCode != null)
                    hashCode = hashCode * 59 + this.ShippedFromCountryCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Method (string) maxLength
            if(this.Method != null && this.Method.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Method, length must be less than 50.", new [] { "Method" });
            }

            // Method (string) minLength
            if(this.Method != null && this.Method.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Method, length must be greater than 0.", new [] { "Method" });
            }

            // TrackTraceNo (string) maxLength
            if(this.TrackTraceNo != null && this.TrackTraceNo.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TrackTraceNo, length must be less than 50.", new [] { "TrackTraceNo" });
            }

            // TrackTraceNo (string) minLength
            if(this.TrackTraceNo != null && this.TrackTraceNo.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TrackTraceNo, length must be greater than 0.", new [] { "TrackTraceNo" });
            }

            // ReturnTrackTraceNo (string) maxLength
            if(this.ReturnTrackTraceNo != null && this.ReturnTrackTraceNo.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReturnTrackTraceNo, length must be less than 50.", new [] { "ReturnTrackTraceNo" });
            }

            // ReturnTrackTraceNo (string) minLength
            if(this.ReturnTrackTraceNo != null && this.ReturnTrackTraceNo.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReturnTrackTraceNo, length must be greater than 0.", new [] { "ReturnTrackTraceNo" });
            }

            // TrackTraceUrl (string) maxLength
            if(this.TrackTraceUrl != null && this.TrackTraceUrl.Length > 250)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TrackTraceUrl, length must be less than 250.", new [] { "TrackTraceUrl" });
            }

            // TrackTraceUrl (string) minLength
            if(this.TrackTraceUrl != null && this.TrackTraceUrl.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TrackTraceUrl, length must be greater than 0.", new [] { "TrackTraceUrl" });
            }

            // ShippedFromCountryCode (string) maxLength
            if(this.ShippedFromCountryCode != null && this.ShippedFromCountryCode.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShippedFromCountryCode, length must be less than 3.", new [] { "ShippedFromCountryCode" });
            }

            // ShippedFromCountryCode (string) minLength
            if(this.ShippedFromCountryCode != null && this.ShippedFromCountryCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShippedFromCountryCode, length must be greater than 0.", new [] { "ShippedFromCountryCode" });
            }

            yield break;
        }
    }

}

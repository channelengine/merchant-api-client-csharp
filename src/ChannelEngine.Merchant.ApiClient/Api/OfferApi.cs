/*
 * ChannelEngine Merchant API
 *
 * ChannelEngine API for merchants
 *
 * The version of the OpenAPI document: 2.13.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ChannelEngine.Merchant.ApiClient.Client;
using ChannelEngine.Merchant.ApiClient.Model;

namespace ChannelEngine.Merchant.ApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOfferApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get stock for products.
        /// </summary>
        /// <remarks>
        /// Get stock of products at stock location(s).
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockLocationIds">The ChannelEngine id of the stock location(s).</param>
        /// <param name="skus">List of your products&#39; sku&#39;s. (optional)</param>
        /// <param name="pageIndex">A page index to get the items (starts from 0) (optional)</param>
        /// <param name="pageSize">Number of items to return (default 100) (optional)</param>
        /// <returns>CollectionOfMerchantOfferGetStockResponse</returns>
        CollectionOfMerchantOfferGetStockResponse OfferGetStock(List<int> stockLocationIds, List<string> skus = default(List<string>), int? pageIndex = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Get stock for products.
        /// </summary>
        /// <remarks>
        /// Get stock of products at stock location(s).
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockLocationIds">The ChannelEngine id of the stock location(s).</param>
        /// <param name="skus">List of your products&#39; sku&#39;s. (optional)</param>
        /// <param name="pageIndex">A page index to get the items (starts from 0) (optional)</param>
        /// <param name="pageSize">Number of items to return (default 100) (optional)</param>
        /// <returns>ApiResponse of CollectionOfMerchantOfferGetStockResponse</returns>
        ApiResponse<CollectionOfMerchantOfferGetStockResponse> OfferGetStockWithHttpInfo(List<int> stockLocationIds, List<string> skus = default(List<string>), int? pageIndex = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Update stock and/or price.
        /// </summary>
        /// <remarks>
        /// Update stock and/or price of product(s).
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantStockPriceUpdateRequest">References to the products that should be updated, and the new values&lt;br /&gt;for the stock or price fields. It is possible to supply only one of the two fields&lt;br /&gt;or both.</param>
        /// <returns>SingleOfDictionaryOfStringAndListOfString</returns>
        SingleOfDictionaryOfStringAndListOfString OfferStockPriceUpdate(List<MerchantStockPriceUpdateRequest> merchantStockPriceUpdateRequest);

        /// <summary>
        /// Update stock and/or price.
        /// </summary>
        /// <remarks>
        /// Update stock and/or price of product(s).
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantStockPriceUpdateRequest">References to the products that should be updated, and the new values&lt;br /&gt;for the stock or price fields. It is possible to supply only one of the two fields&lt;br /&gt;or both.</param>
        /// <returns>ApiResponse of SingleOfDictionaryOfStringAndListOfString</returns>
        ApiResponse<SingleOfDictionaryOfStringAndListOfString> OfferStockPriceUpdateWithHttpInfo(List<MerchantStockPriceUpdateRequest> merchantStockPriceUpdateRequest);
        /// <summary>
        /// Update only stock.
        /// </summary>
        /// <remarks>
        /// Update only stock of product(s).
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOfferStockUpdateRequest">References to the new values for the stock fields</param>
        /// <returns>SingleOfDictionaryOfStringAndListOfString</returns>
        SingleOfDictionaryOfStringAndListOfString OfferStockUpdate(List<MerchantOfferStockUpdateRequest> merchantOfferStockUpdateRequest);

        /// <summary>
        /// Update only stock.
        /// </summary>
        /// <remarks>
        /// Update only stock of product(s).
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOfferStockUpdateRequest">References to the new values for the stock fields</param>
        /// <returns>ApiResponse of SingleOfDictionaryOfStringAndListOfString</returns>
        ApiResponse<SingleOfDictionaryOfStringAndListOfString> OfferStockUpdateWithHttpInfo(List<MerchantOfferStockUpdateRequest> merchantOfferStockUpdateRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOfferApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get stock for products.
        /// </summary>
        /// <remarks>
        /// Get stock of products at stock location(s).
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockLocationIds">The ChannelEngine id of the stock location(s).</param>
        /// <param name="skus">List of your products&#39; sku&#39;s. (optional)</param>
        /// <param name="pageIndex">A page index to get the items (starts from 0) (optional)</param>
        /// <param name="pageSize">Number of items to return (default 100) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionOfMerchantOfferGetStockResponse</returns>
        System.Threading.Tasks.Task<CollectionOfMerchantOfferGetStockResponse> OfferGetStockAsync(List<int> stockLocationIds, List<string> skus = default(List<string>), int? pageIndex = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get stock for products.
        /// </summary>
        /// <remarks>
        /// Get stock of products at stock location(s).
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockLocationIds">The ChannelEngine id of the stock location(s).</param>
        /// <param name="skus">List of your products&#39; sku&#39;s. (optional)</param>
        /// <param name="pageIndex">A page index to get the items (starts from 0) (optional)</param>
        /// <param name="pageSize">Number of items to return (default 100) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionOfMerchantOfferGetStockResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionOfMerchantOfferGetStockResponse>> OfferGetStockWithHttpInfoAsync(List<int> stockLocationIds, List<string> skus = default(List<string>), int? pageIndex = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update stock and/or price.
        /// </summary>
        /// <remarks>
        /// Update stock and/or price of product(s).
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantStockPriceUpdateRequest">References to the products that should be updated, and the new values&lt;br /&gt;for the stock or price fields. It is possible to supply only one of the two fields&lt;br /&gt;or both.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleOfDictionaryOfStringAndListOfString</returns>
        System.Threading.Tasks.Task<SingleOfDictionaryOfStringAndListOfString> OfferStockPriceUpdateAsync(List<MerchantStockPriceUpdateRequest> merchantStockPriceUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update stock and/or price.
        /// </summary>
        /// <remarks>
        /// Update stock and/or price of product(s).
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantStockPriceUpdateRequest">References to the products that should be updated, and the new values&lt;br /&gt;for the stock or price fields. It is possible to supply only one of the two fields&lt;br /&gt;or both.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleOfDictionaryOfStringAndListOfString)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleOfDictionaryOfStringAndListOfString>> OfferStockPriceUpdateWithHttpInfoAsync(List<MerchantStockPriceUpdateRequest> merchantStockPriceUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update only stock.
        /// </summary>
        /// <remarks>
        /// Update only stock of product(s).
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOfferStockUpdateRequest">References to the new values for the stock fields</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleOfDictionaryOfStringAndListOfString</returns>
        System.Threading.Tasks.Task<SingleOfDictionaryOfStringAndListOfString> OfferStockUpdateAsync(List<MerchantOfferStockUpdateRequest> merchantOfferStockUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update only stock.
        /// </summary>
        /// <remarks>
        /// Update only stock of product(s).
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOfferStockUpdateRequest">References to the new values for the stock fields</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleOfDictionaryOfStringAndListOfString)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleOfDictionaryOfStringAndListOfString>> OfferStockUpdateWithHttpInfoAsync(List<MerchantOfferStockUpdateRequest> merchantOfferStockUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOfferApi : IOfferApiSync, IOfferApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OfferApi : IOfferApi
    {
        private ChannelEngine.Merchant.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OfferApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OfferApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OfferApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OfferApi(string basePath)
        {
            this.Configuration = ChannelEngine.Merchant.ApiClient.Client.Configuration.MergeConfigurations(
                ChannelEngine.Merchant.ApiClient.Client.GlobalConfiguration.Instance,
                new ChannelEngine.Merchant.ApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ChannelEngine.Merchant.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ChannelEngine.Merchant.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ChannelEngine.Merchant.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OfferApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OfferApi(ChannelEngine.Merchant.ApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ChannelEngine.Merchant.ApiClient.Client.Configuration.MergeConfigurations(
                ChannelEngine.Merchant.ApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ChannelEngine.Merchant.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ChannelEngine.Merchant.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ChannelEngine.Merchant.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OfferApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OfferApi(ChannelEngine.Merchant.ApiClient.Client.ISynchronousClient client, ChannelEngine.Merchant.ApiClient.Client.IAsynchronousClient asyncClient, ChannelEngine.Merchant.ApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ChannelEngine.Merchant.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ChannelEngine.Merchant.ApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ChannelEngine.Merchant.ApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ChannelEngine.Merchant.ApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ChannelEngine.Merchant.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get stock for products. Get stock of products at stock location(s).
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockLocationIds">The ChannelEngine id of the stock location(s).</param>
        /// <param name="skus">List of your products&#39; sku&#39;s. (optional)</param>
        /// <param name="pageIndex">A page index to get the items (starts from 0) (optional)</param>
        /// <param name="pageSize">Number of items to return (default 100) (optional)</param>
        /// <returns>CollectionOfMerchantOfferGetStockResponse</returns>
        public CollectionOfMerchantOfferGetStockResponse OfferGetStock(List<int> stockLocationIds, List<string> skus = default(List<string>), int? pageIndex = default(int?), int? pageSize = default(int?))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantOfferGetStockResponse> localVarResponse = OfferGetStockWithHttpInfo(stockLocationIds, skus, pageIndex, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get stock for products. Get stock of products at stock location(s).
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockLocationIds">The ChannelEngine id of the stock location(s).</param>
        /// <param name="skus">List of your products&#39; sku&#39;s. (optional)</param>
        /// <param name="pageIndex">A page index to get the items (starts from 0) (optional)</param>
        /// <param name="pageSize">Number of items to return (default 100) (optional)</param>
        /// <returns>ApiResponse of CollectionOfMerchantOfferGetStockResponse</returns>
        public ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantOfferGetStockResponse> OfferGetStockWithHttpInfo(List<int> stockLocationIds, List<string> skus = default(List<string>), int? pageIndex = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'stockLocationIds' is set
            if (stockLocationIds == null)
                throw new ChannelEngine.Merchant.ApiClient.Client.ApiException(400, "Missing required parameter 'stockLocationIds' when calling OfferApi->OfferGetStock");

            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (skus != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "skus", skus));
            }
            localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "stockLocationIds", stockLocationIds));
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionOfMerchantOfferGetStockResponse>("/v2/offer/stock", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OfferGetStock", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get stock for products. Get stock of products at stock location(s).
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockLocationIds">The ChannelEngine id of the stock location(s).</param>
        /// <param name="skus">List of your products&#39; sku&#39;s. (optional)</param>
        /// <param name="pageIndex">A page index to get the items (starts from 0) (optional)</param>
        /// <param name="pageSize">Number of items to return (default 100) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionOfMerchantOfferGetStockResponse</returns>
        public async System.Threading.Tasks.Task<CollectionOfMerchantOfferGetStockResponse> OfferGetStockAsync(List<int> stockLocationIds, List<string> skus = default(List<string>), int? pageIndex = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantOfferGetStockResponse> localVarResponse = await OfferGetStockWithHttpInfoAsync(stockLocationIds, skus, pageIndex, pageSize, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get stock for products. Get stock of products at stock location(s).
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockLocationIds">The ChannelEngine id of the stock location(s).</param>
        /// <param name="skus">List of your products&#39; sku&#39;s. (optional)</param>
        /// <param name="pageIndex">A page index to get the items (starts from 0) (optional)</param>
        /// <param name="pageSize">Number of items to return (default 100) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionOfMerchantOfferGetStockResponse)</returns>
        public async System.Threading.Tasks.Task<ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantOfferGetStockResponse>> OfferGetStockWithHttpInfoAsync(List<int> stockLocationIds, List<string> skus = default(List<string>), int? pageIndex = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'stockLocationIds' is set
            if (stockLocationIds == null)
                throw new ChannelEngine.Merchant.ApiClient.Client.ApiException(400, "Missing required parameter 'stockLocationIds' when calling OfferApi->OfferGetStock");


            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (skus != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "skus", skus));
            }
            localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "stockLocationIds", stockLocationIds));
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionOfMerchantOfferGetStockResponse>("/v2/offer/stock", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OfferGetStock", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update stock and/or price. Update stock and/or price of product(s).
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantStockPriceUpdateRequest">References to the products that should be updated, and the new values&lt;br /&gt;for the stock or price fields. It is possible to supply only one of the two fields&lt;br /&gt;or both.</param>
        /// <returns>SingleOfDictionaryOfStringAndListOfString</returns>
        public SingleOfDictionaryOfStringAndListOfString OfferStockPriceUpdate(List<MerchantStockPriceUpdateRequest> merchantStockPriceUpdateRequest)
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<SingleOfDictionaryOfStringAndListOfString> localVarResponse = OfferStockPriceUpdateWithHttpInfo(merchantStockPriceUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update stock and/or price. Update stock and/or price of product(s).
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantStockPriceUpdateRequest">References to the products that should be updated, and the new values&lt;br /&gt;for the stock or price fields. It is possible to supply only one of the two fields&lt;br /&gt;or both.</param>
        /// <returns>ApiResponse of SingleOfDictionaryOfStringAndListOfString</returns>
        public ChannelEngine.Merchant.ApiClient.Client.ApiResponse<SingleOfDictionaryOfStringAndListOfString> OfferStockPriceUpdateWithHttpInfo(List<MerchantStockPriceUpdateRequest> merchantStockPriceUpdateRequest)
        {
            // verify the required parameter 'merchantStockPriceUpdateRequest' is set
            if (merchantStockPriceUpdateRequest == null)
                throw new ChannelEngine.Merchant.ApiClient.Client.ApiException(400, "Missing required parameter 'merchantStockPriceUpdateRequest' when calling OfferApi->OfferStockPriceUpdate");

            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = merchantStockPriceUpdateRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SingleOfDictionaryOfStringAndListOfString>("/v2/offer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OfferStockPriceUpdate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update stock and/or price. Update stock and/or price of product(s).
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantStockPriceUpdateRequest">References to the products that should be updated, and the new values&lt;br /&gt;for the stock or price fields. It is possible to supply only one of the two fields&lt;br /&gt;or both.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleOfDictionaryOfStringAndListOfString</returns>
        public async System.Threading.Tasks.Task<SingleOfDictionaryOfStringAndListOfString> OfferStockPriceUpdateAsync(List<MerchantStockPriceUpdateRequest> merchantStockPriceUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<SingleOfDictionaryOfStringAndListOfString> localVarResponse = await OfferStockPriceUpdateWithHttpInfoAsync(merchantStockPriceUpdateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update stock and/or price. Update stock and/or price of product(s).
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantStockPriceUpdateRequest">References to the products that should be updated, and the new values&lt;br /&gt;for the stock or price fields. It is possible to supply only one of the two fields&lt;br /&gt;or both.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleOfDictionaryOfStringAndListOfString)</returns>
        public async System.Threading.Tasks.Task<ChannelEngine.Merchant.ApiClient.Client.ApiResponse<SingleOfDictionaryOfStringAndListOfString>> OfferStockPriceUpdateWithHttpInfoAsync(List<MerchantStockPriceUpdateRequest> merchantStockPriceUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'merchantStockPriceUpdateRequest' is set
            if (merchantStockPriceUpdateRequest == null)
                throw new ChannelEngine.Merchant.ApiClient.Client.ApiException(400, "Missing required parameter 'merchantStockPriceUpdateRequest' when calling OfferApi->OfferStockPriceUpdate");


            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = merchantStockPriceUpdateRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<SingleOfDictionaryOfStringAndListOfString>("/v2/offer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OfferStockPriceUpdate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update only stock. Update only stock of product(s).
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOfferStockUpdateRequest">References to the new values for the stock fields</param>
        /// <returns>SingleOfDictionaryOfStringAndListOfString</returns>
        public SingleOfDictionaryOfStringAndListOfString OfferStockUpdate(List<MerchantOfferStockUpdateRequest> merchantOfferStockUpdateRequest)
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<SingleOfDictionaryOfStringAndListOfString> localVarResponse = OfferStockUpdateWithHttpInfo(merchantOfferStockUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update only stock. Update only stock of product(s).
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOfferStockUpdateRequest">References to the new values for the stock fields</param>
        /// <returns>ApiResponse of SingleOfDictionaryOfStringAndListOfString</returns>
        public ChannelEngine.Merchant.ApiClient.Client.ApiResponse<SingleOfDictionaryOfStringAndListOfString> OfferStockUpdateWithHttpInfo(List<MerchantOfferStockUpdateRequest> merchantOfferStockUpdateRequest)
        {
            // verify the required parameter 'merchantOfferStockUpdateRequest' is set
            if (merchantOfferStockUpdateRequest == null)
                throw new ChannelEngine.Merchant.ApiClient.Client.ApiException(400, "Missing required parameter 'merchantOfferStockUpdateRequest' when calling OfferApi->OfferStockUpdate");

            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = merchantOfferStockUpdateRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SingleOfDictionaryOfStringAndListOfString>("/v2/offer/stock", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OfferStockUpdate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update only stock. Update only stock of product(s).
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOfferStockUpdateRequest">References to the new values for the stock fields</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleOfDictionaryOfStringAndListOfString</returns>
        public async System.Threading.Tasks.Task<SingleOfDictionaryOfStringAndListOfString> OfferStockUpdateAsync(List<MerchantOfferStockUpdateRequest> merchantOfferStockUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<SingleOfDictionaryOfStringAndListOfString> localVarResponse = await OfferStockUpdateWithHttpInfoAsync(merchantOfferStockUpdateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update only stock. Update only stock of product(s).
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOfferStockUpdateRequest">References to the new values for the stock fields</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleOfDictionaryOfStringAndListOfString)</returns>
        public async System.Threading.Tasks.Task<ChannelEngine.Merchant.ApiClient.Client.ApiResponse<SingleOfDictionaryOfStringAndListOfString>> OfferStockUpdateWithHttpInfoAsync(List<MerchantOfferStockUpdateRequest> merchantOfferStockUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'merchantOfferStockUpdateRequest' is set
            if (merchantOfferStockUpdateRequest == null)
                throw new ChannelEngine.Merchant.ApiClient.Client.ApiException(400, "Missing required parameter 'merchantOfferStockUpdateRequest' when calling OfferApi->OfferStockUpdate");


            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = merchantOfferStockUpdateRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<SingleOfDictionaryOfStringAndListOfString>("/v2/offer/stock", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OfferStockUpdate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}

/*
 * ChannelEngine Merchant API
 *
 * ChannelEngine API for merchants
 *
 * The version of the OpenAPI document: 2.9.8
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ChannelEngine.Merchant.ApiClient.Client;
using ChannelEngine.Merchant.ApiClient.Model;

namespace ChannelEngine.Merchant.ApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Acknowledge Order.
        /// </summary>
        /// <remarks>
        /// Acknowledge an order. By acknowledging the order the merchant can confirm that&lt;br /&gt;the order has been imported. When acknowledging an order the merchant has to supply&lt;br /&gt;references that uniquely identify the order and the order lines. These references&lt;br /&gt;will be used in the other API calls.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderAcknowledgementRequest">Relations between the id&#39;s returned by ChannelEngine and the references which the merchant uses. (optional)</param>
        /// <returns>ApiResponse</returns>
        ApiResponse OrderAcknowledge(MerchantOrderAcknowledgementRequest merchantOrderAcknowledgementRequest = default(MerchantOrderAcknowledgementRequest));

        /// <summary>
        /// Acknowledge Order.
        /// </summary>
        /// <remarks>
        /// Acknowledge an order. By acknowledging the order the merchant can confirm that&lt;br /&gt;the order has been imported. When acknowledging an order the merchant has to supply&lt;br /&gt;references that uniquely identify the order and the order lines. These references&lt;br /&gt;will be used in the other API calls.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderAcknowledgementRequest">Relations between the id&#39;s returned by ChannelEngine and the references which the merchant uses. (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> OrderAcknowledgeWithHttpInfo(MerchantOrderAcknowledgementRequest merchantOrderAcknowledgementRequest = default(MerchantOrderAcknowledgementRequest));
        /// <summary>
        /// Get Orders By Filter.
        /// </summary>
        /// <remarks>
        /// Fetch orders based on the provided OrderFilter.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statuses">Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter. (optional)</param>
        /// <param name="emailAddresses">Client emailaddresses to filter on. (optional)</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant. (optional)</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel. (optional)</param>
        /// <param name="fromDate">Filter on the order date, starting from this date. This date is inclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)</param>
        /// <param name="toDate">Filter on the order date, until this date. This date is exclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)</param>
        /// <param name="fromCreatedAtDate">Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive.&lt;br /&gt;The created date is set on the date and time when the order is created. (optional)</param>
        /// <param name="excludeMarketplaceFulfilledOrdersAndLines">Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.) (optional)</param>
        /// <param name="fulfillmentType">Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.&lt;br /&gt;To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true. (optional)</param>
        /// <param name="onlyWithCancellationRequests">Filter on orders containing cancellation requests.&lt;br /&gt;Some channels allow a customer to cancel an order until it has been shipped.&lt;br /&gt;When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation. (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <returns>CollectionOfMerchantOrderResponse</returns>
        CollectionOfMerchantOrderResponse OrderGetByFilter(List<OrderStatusView> statuses = default(List<OrderStatusView>), List<string> emailAddresses = default(List<string>), List<string> merchantOrderNos = default(List<string>), List<string> channelOrderNos = default(List<string>), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), DateTime? fromCreatedAtDate = default(DateTime?), bool? excludeMarketplaceFulfilledOrdersAndLines = default(bool?), FulfillmentType? fulfillmentType = default(FulfillmentType?), bool? onlyWithCancellationRequests = default(bool?), int? page = default(int?));

        /// <summary>
        /// Get Orders By Filter.
        /// </summary>
        /// <remarks>
        /// Fetch orders based on the provided OrderFilter.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statuses">Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter. (optional)</param>
        /// <param name="emailAddresses">Client emailaddresses to filter on. (optional)</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant. (optional)</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel. (optional)</param>
        /// <param name="fromDate">Filter on the order date, starting from this date. This date is inclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)</param>
        /// <param name="toDate">Filter on the order date, until this date. This date is exclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)</param>
        /// <param name="fromCreatedAtDate">Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive.&lt;br /&gt;The created date is set on the date and time when the order is created. (optional)</param>
        /// <param name="excludeMarketplaceFulfilledOrdersAndLines">Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.) (optional)</param>
        /// <param name="fulfillmentType">Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.&lt;br /&gt;To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true. (optional)</param>
        /// <param name="onlyWithCancellationRequests">Filter on orders containing cancellation requests.&lt;br /&gt;Some channels allow a customer to cancel an order until it has been shipped.&lt;br /&gt;When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation. (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <returns>ApiResponse of CollectionOfMerchantOrderResponse</returns>
        ApiResponse<CollectionOfMerchantOrderResponse> OrderGetByFilterWithHttpInfo(List<OrderStatusView> statuses = default(List<OrderStatusView>), List<string> emailAddresses = default(List<string>), List<string> merchantOrderNos = default(List<string>), List<string> channelOrderNos = default(List<string>), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), DateTime? fromCreatedAtDate = default(DateTime?), bool? excludeMarketplaceFulfilledOrdersAndLines = default(bool?), FulfillmentType? fulfillmentType = default(FulfillmentType?), bool? onlyWithCancellationRequests = default(bool?), int? page = default(int?));
        /// <summary>
        /// Get New Orders.
        /// </summary>
        /// <remarks>
        /// Fetch newly placed orders (order with status NEW).
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CollectionOfMerchantOrderResponse</returns>
        CollectionOfMerchantOrderResponse OrderGetNew();

        /// <summary>
        /// Get New Orders.
        /// </summary>
        /// <remarks>
        /// Fetch newly placed orders (order with status NEW).
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CollectionOfMerchantOrderResponse</returns>
        ApiResponse<CollectionOfMerchantOrderResponse> OrderGetNewWithHttpInfo();
        /// <summary>
        /// Download Invoice.
        /// </summary>
        /// <remarks>
        /// Generates the ChannelEngine VAT invoice for this order in PDF.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderNo">The unique order reference as used by the merchant.</param>
        /// <param name="useCustomerCulture">Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream OrderInvoice(string merchantOrderNo, bool? useCustomerCulture = default(bool?));

        /// <summary>
        /// Download Invoice.
        /// </summary>
        /// <remarks>
        /// Generates the ChannelEngine VAT invoice for this order in PDF.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderNo">The unique order reference as used by the merchant.</param>
        /// <param name="useCustomerCulture">Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> OrderInvoiceWithHttpInfo(string merchantOrderNo, bool? useCustomerCulture = default(bool?));
        /// <summary>
        /// Download Packing Slip.
        /// </summary>
        /// <remarks>
        /// Generates the ChannelEngine packing slip for this order in PDF.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderNo">The unique order reference as used by the merchant.</param>
        /// <param name="useCustomerCulture">Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream OrderPackingSlip(string merchantOrderNo, bool? useCustomerCulture = default(bool?));

        /// <summary>
        /// Download Packing Slip.
        /// </summary>
        /// <remarks>
        /// Generates the ChannelEngine packing slip for this order in PDF.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderNo">The unique order reference as used by the merchant.</param>
        /// <param name="useCustomerCulture">Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> OrderPackingSlipWithHttpInfo(string merchantOrderNo, bool? useCustomerCulture = default(bool?));
        /// <summary>
        /// Update Comment.
        /// </summary>
        /// <remarks>
        /// Update the merchant comment for an order. Both the ChannelEngine order id as the&lt;br /&gt;merchant order number can be used for updating a comment.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderCommentUpdateRequest"> (optional)</param>
        /// <returns>ApiResponse</returns>
        ApiResponse OrderUpdate(MerchantOrderCommentUpdateRequest merchantOrderCommentUpdateRequest = default(MerchantOrderCommentUpdateRequest));

        /// <summary>
        /// Update Comment.
        /// </summary>
        /// <remarks>
        /// Update the merchant comment for an order. Both the ChannelEngine order id as the&lt;br /&gt;merchant order number can be used for updating a comment.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderCommentUpdateRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> OrderUpdateWithHttpInfo(MerchantOrderCommentUpdateRequest merchantOrderCommentUpdateRequest = default(MerchantOrderCommentUpdateRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Acknowledge Order.
        /// </summary>
        /// <remarks>
        /// Acknowledge an order. By acknowledging the order the merchant can confirm that&lt;br /&gt;the order has been imported. When acknowledging an order the merchant has to supply&lt;br /&gt;references that uniquely identify the order and the order lines. These references&lt;br /&gt;will be used in the other API calls.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderAcknowledgementRequest">Relations between the id&#39;s returned by ChannelEngine and the references which the merchant uses. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> OrderAcknowledgeAsync(MerchantOrderAcknowledgementRequest merchantOrderAcknowledgementRequest = default(MerchantOrderAcknowledgementRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Acknowledge Order.
        /// </summary>
        /// <remarks>
        /// Acknowledge an order. By acknowledging the order the merchant can confirm that&lt;br /&gt;the order has been imported. When acknowledging an order the merchant has to supply&lt;br /&gt;references that uniquely identify the order and the order lines. These references&lt;br /&gt;will be used in the other API calls.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderAcknowledgementRequest">Relations between the id&#39;s returned by ChannelEngine and the references which the merchant uses. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> OrderAcknowledgeWithHttpInfoAsync(MerchantOrderAcknowledgementRequest merchantOrderAcknowledgementRequest = default(MerchantOrderAcknowledgementRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Orders By Filter.
        /// </summary>
        /// <remarks>
        /// Fetch orders based on the provided OrderFilter.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statuses">Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter. (optional)</param>
        /// <param name="emailAddresses">Client emailaddresses to filter on. (optional)</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant. (optional)</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel. (optional)</param>
        /// <param name="fromDate">Filter on the order date, starting from this date. This date is inclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)</param>
        /// <param name="toDate">Filter on the order date, until this date. This date is exclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)</param>
        /// <param name="fromCreatedAtDate">Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive.&lt;br /&gt;The created date is set on the date and time when the order is created. (optional)</param>
        /// <param name="excludeMarketplaceFulfilledOrdersAndLines">Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.) (optional)</param>
        /// <param name="fulfillmentType">Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.&lt;br /&gt;To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true. (optional)</param>
        /// <param name="onlyWithCancellationRequests">Filter on orders containing cancellation requests.&lt;br /&gt;Some channels allow a customer to cancel an order until it has been shipped.&lt;br /&gt;When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation. (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionOfMerchantOrderResponse</returns>
        System.Threading.Tasks.Task<CollectionOfMerchantOrderResponse> OrderGetByFilterAsync(List<OrderStatusView> statuses = default(List<OrderStatusView>), List<string> emailAddresses = default(List<string>), List<string> merchantOrderNos = default(List<string>), List<string> channelOrderNos = default(List<string>), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), DateTime? fromCreatedAtDate = default(DateTime?), bool? excludeMarketplaceFulfilledOrdersAndLines = default(bool?), FulfillmentType? fulfillmentType = default(FulfillmentType?), bool? onlyWithCancellationRequests = default(bool?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Orders By Filter.
        /// </summary>
        /// <remarks>
        /// Fetch orders based on the provided OrderFilter.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statuses">Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter. (optional)</param>
        /// <param name="emailAddresses">Client emailaddresses to filter on. (optional)</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant. (optional)</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel. (optional)</param>
        /// <param name="fromDate">Filter on the order date, starting from this date. This date is inclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)</param>
        /// <param name="toDate">Filter on the order date, until this date. This date is exclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)</param>
        /// <param name="fromCreatedAtDate">Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive.&lt;br /&gt;The created date is set on the date and time when the order is created. (optional)</param>
        /// <param name="excludeMarketplaceFulfilledOrdersAndLines">Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.) (optional)</param>
        /// <param name="fulfillmentType">Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.&lt;br /&gt;To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true. (optional)</param>
        /// <param name="onlyWithCancellationRequests">Filter on orders containing cancellation requests.&lt;br /&gt;Some channels allow a customer to cancel an order until it has been shipped.&lt;br /&gt;When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation. (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionOfMerchantOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionOfMerchantOrderResponse>> OrderGetByFilterWithHttpInfoAsync(List<OrderStatusView> statuses = default(List<OrderStatusView>), List<string> emailAddresses = default(List<string>), List<string> merchantOrderNos = default(List<string>), List<string> channelOrderNos = default(List<string>), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), DateTime? fromCreatedAtDate = default(DateTime?), bool? excludeMarketplaceFulfilledOrdersAndLines = default(bool?), FulfillmentType? fulfillmentType = default(FulfillmentType?), bool? onlyWithCancellationRequests = default(bool?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get New Orders.
        /// </summary>
        /// <remarks>
        /// Fetch newly placed orders (order with status NEW).
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionOfMerchantOrderResponse</returns>
        System.Threading.Tasks.Task<CollectionOfMerchantOrderResponse> OrderGetNewAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get New Orders.
        /// </summary>
        /// <remarks>
        /// Fetch newly placed orders (order with status NEW).
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionOfMerchantOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionOfMerchantOrderResponse>> OrderGetNewWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Download Invoice.
        /// </summary>
        /// <remarks>
        /// Generates the ChannelEngine VAT invoice for this order in PDF.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderNo">The unique order reference as used by the merchant.</param>
        /// <param name="useCustomerCulture">Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> OrderInvoiceAsync(string merchantOrderNo, bool? useCustomerCulture = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Download Invoice.
        /// </summary>
        /// <remarks>
        /// Generates the ChannelEngine VAT invoice for this order in PDF.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderNo">The unique order reference as used by the merchant.</param>
        /// <param name="useCustomerCulture">Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> OrderInvoiceWithHttpInfoAsync(string merchantOrderNo, bool? useCustomerCulture = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Download Packing Slip.
        /// </summary>
        /// <remarks>
        /// Generates the ChannelEngine packing slip for this order in PDF.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderNo">The unique order reference as used by the merchant.</param>
        /// <param name="useCustomerCulture">Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> OrderPackingSlipAsync(string merchantOrderNo, bool? useCustomerCulture = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Download Packing Slip.
        /// </summary>
        /// <remarks>
        /// Generates the ChannelEngine packing slip for this order in PDF.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderNo">The unique order reference as used by the merchant.</param>
        /// <param name="useCustomerCulture">Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> OrderPackingSlipWithHttpInfoAsync(string merchantOrderNo, bool? useCustomerCulture = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Comment.
        /// </summary>
        /// <remarks>
        /// Update the merchant comment for an order. Both the ChannelEngine order id as the&lt;br /&gt;merchant order number can be used for updating a comment.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderCommentUpdateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> OrderUpdateAsync(MerchantOrderCommentUpdateRequest merchantOrderCommentUpdateRequest = default(MerchantOrderCommentUpdateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Comment.
        /// </summary>
        /// <remarks>
        /// Update the merchant comment for an order. Both the ChannelEngine order id as the&lt;br /&gt;merchant order number can be used for updating a comment.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderCommentUpdateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> OrderUpdateWithHttpInfoAsync(MerchantOrderCommentUpdateRequest merchantOrderCommentUpdateRequest = default(MerchantOrderCommentUpdateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderApi : IOrderApiSync, IOrderApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrderApi : IOrderApi
    {
        private ChannelEngine.Merchant.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrderApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrderApi(String basePath)
        {
            this.Configuration = ChannelEngine.Merchant.ApiClient.Client.Configuration.MergeConfigurations(
                ChannelEngine.Merchant.ApiClient.Client.GlobalConfiguration.Instance,
                new ChannelEngine.Merchant.ApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ChannelEngine.Merchant.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ChannelEngine.Merchant.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ChannelEngine.Merchant.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrderApi(ChannelEngine.Merchant.ApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ChannelEngine.Merchant.ApiClient.Client.Configuration.MergeConfigurations(
                ChannelEngine.Merchant.ApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ChannelEngine.Merchant.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ChannelEngine.Merchant.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ChannelEngine.Merchant.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OrderApi(ChannelEngine.Merchant.ApiClient.Client.ISynchronousClient client, ChannelEngine.Merchant.ApiClient.Client.IAsynchronousClient asyncClient, ChannelEngine.Merchant.ApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ChannelEngine.Merchant.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ChannelEngine.Merchant.ApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ChannelEngine.Merchant.ApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ChannelEngine.Merchant.ApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ChannelEngine.Merchant.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Acknowledge Order. Acknowledge an order. By acknowledging the order the merchant can confirm that&lt;br /&gt;the order has been imported. When acknowledging an order the merchant has to supply&lt;br /&gt;references that uniquely identify the order and the order lines. These references&lt;br /&gt;will be used in the other API calls.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderAcknowledgementRequest">Relations between the id&#39;s returned by ChannelEngine and the references which the merchant uses. (optional)</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse OrderAcknowledge(MerchantOrderAcknowledgementRequest merchantOrderAcknowledgementRequest = default(MerchantOrderAcknowledgementRequest))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse> localVarResponse = OrderAcknowledgeWithHttpInfo(merchantOrderAcknowledgementRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Acknowledge Order. Acknowledge an order. By acknowledging the order the merchant can confirm that&lt;br /&gt;the order has been imported. When acknowledging an order the merchant has to supply&lt;br /&gt;references that uniquely identify the order and the order lines. These references&lt;br /&gt;will be used in the other API calls.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderAcknowledgementRequest">Relations between the id&#39;s returned by ChannelEngine and the references which the merchant uses. (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse> OrderAcknowledgeWithHttpInfo(MerchantOrderAcknowledgementRequest merchantOrderAcknowledgementRequest = default(MerchantOrderAcknowledgementRequest))
        {
            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = merchantOrderAcknowledgementRequest;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/v2/orders/acknowledge", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderAcknowledge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Acknowledge Order. Acknowledge an order. By acknowledging the order the merchant can confirm that&lt;br /&gt;the order has been imported. When acknowledging an order the merchant has to supply&lt;br /&gt;references that uniquely identify the order and the order lines. These references&lt;br /&gt;will be used in the other API calls.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderAcknowledgementRequest">Relations between the id&#39;s returned by ChannelEngine and the references which the merchant uses. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> OrderAcknowledgeAsync(MerchantOrderAcknowledgementRequest merchantOrderAcknowledgementRequest = default(MerchantOrderAcknowledgementRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse> localVarResponse = await OrderAcknowledgeWithHttpInfoAsync(merchantOrderAcknowledgementRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Acknowledge Order. Acknowledge an order. By acknowledging the order the merchant can confirm that&lt;br /&gt;the order has been imported. When acknowledging an order the merchant has to supply&lt;br /&gt;references that uniquely identify the order and the order lines. These references&lt;br /&gt;will be used in the other API calls.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderAcknowledgementRequest">Relations between the id&#39;s returned by ChannelEngine and the references which the merchant uses. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse>> OrderAcknowledgeWithHttpInfoAsync(MerchantOrderAcknowledgementRequest merchantOrderAcknowledgementRequest = default(MerchantOrderAcknowledgementRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = merchantOrderAcknowledgementRequest;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/v2/orders/acknowledge", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderAcknowledge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Orders By Filter. Fetch orders based on the provided OrderFilter.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statuses">Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter. (optional)</param>
        /// <param name="emailAddresses">Client emailaddresses to filter on. (optional)</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant. (optional)</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel. (optional)</param>
        /// <param name="fromDate">Filter on the order date, starting from this date. This date is inclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)</param>
        /// <param name="toDate">Filter on the order date, until this date. This date is exclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)</param>
        /// <param name="fromCreatedAtDate">Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive.&lt;br /&gt;The created date is set on the date and time when the order is created. (optional)</param>
        /// <param name="excludeMarketplaceFulfilledOrdersAndLines">Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.) (optional)</param>
        /// <param name="fulfillmentType">Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.&lt;br /&gt;To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true. (optional)</param>
        /// <param name="onlyWithCancellationRequests">Filter on orders containing cancellation requests.&lt;br /&gt;Some channels allow a customer to cancel an order until it has been shipped.&lt;br /&gt;When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation. (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <returns>CollectionOfMerchantOrderResponse</returns>
        public CollectionOfMerchantOrderResponse OrderGetByFilter(List<OrderStatusView> statuses = default(List<OrderStatusView>), List<string> emailAddresses = default(List<string>), List<string> merchantOrderNos = default(List<string>), List<string> channelOrderNos = default(List<string>), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), DateTime? fromCreatedAtDate = default(DateTime?), bool? excludeMarketplaceFulfilledOrdersAndLines = default(bool?), FulfillmentType? fulfillmentType = default(FulfillmentType?), bool? onlyWithCancellationRequests = default(bool?), int? page = default(int?))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantOrderResponse> localVarResponse = OrderGetByFilterWithHttpInfo(statuses, emailAddresses, merchantOrderNos, channelOrderNos, fromDate, toDate, fromCreatedAtDate, excludeMarketplaceFulfilledOrdersAndLines, fulfillmentType, onlyWithCancellationRequests, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Orders By Filter. Fetch orders based on the provided OrderFilter.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statuses">Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter. (optional)</param>
        /// <param name="emailAddresses">Client emailaddresses to filter on. (optional)</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant. (optional)</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel. (optional)</param>
        /// <param name="fromDate">Filter on the order date, starting from this date. This date is inclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)</param>
        /// <param name="toDate">Filter on the order date, until this date. This date is exclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)</param>
        /// <param name="fromCreatedAtDate">Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive.&lt;br /&gt;The created date is set on the date and time when the order is created. (optional)</param>
        /// <param name="excludeMarketplaceFulfilledOrdersAndLines">Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.) (optional)</param>
        /// <param name="fulfillmentType">Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.&lt;br /&gt;To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true. (optional)</param>
        /// <param name="onlyWithCancellationRequests">Filter on orders containing cancellation requests.&lt;br /&gt;Some channels allow a customer to cancel an order until it has been shipped.&lt;br /&gt;When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation. (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <returns>ApiResponse of CollectionOfMerchantOrderResponse</returns>
        public ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantOrderResponse> OrderGetByFilterWithHttpInfo(List<OrderStatusView> statuses = default(List<OrderStatusView>), List<string> emailAddresses = default(List<string>), List<string> merchantOrderNos = default(List<string>), List<string> channelOrderNos = default(List<string>), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), DateTime? fromCreatedAtDate = default(DateTime?), bool? excludeMarketplaceFulfilledOrdersAndLines = default(bool?), FulfillmentType? fulfillmentType = default(FulfillmentType?), bool? onlyWithCancellationRequests = default(bool?), int? page = default(int?))
        {
            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (statuses != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "statuses", statuses));
            }
            if (emailAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "emailAddresses", emailAddresses));
            }
            if (merchantOrderNos != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "merchantOrderNos", merchantOrderNos));
            }
            if (channelOrderNos != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "channelOrderNos", channelOrderNos));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate));
            }
            if (fromCreatedAtDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "fromCreatedAtDate", fromCreatedAtDate));
            }
            if (excludeMarketplaceFulfilledOrdersAndLines != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "excludeMarketplaceFulfilledOrdersAndLines", excludeMarketplaceFulfilledOrdersAndLines));
            }
            if (fulfillmentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "fulfillmentType", fulfillmentType));
            }
            if (onlyWithCancellationRequests != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "onlyWithCancellationRequests", onlyWithCancellationRequests));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionOfMerchantOrderResponse>("/v2/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderGetByFilter", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Orders By Filter. Fetch orders based on the provided OrderFilter.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statuses">Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter. (optional)</param>
        /// <param name="emailAddresses">Client emailaddresses to filter on. (optional)</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant. (optional)</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel. (optional)</param>
        /// <param name="fromDate">Filter on the order date, starting from this date. This date is inclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)</param>
        /// <param name="toDate">Filter on the order date, until this date. This date is exclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)</param>
        /// <param name="fromCreatedAtDate">Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive.&lt;br /&gt;The created date is set on the date and time when the order is created. (optional)</param>
        /// <param name="excludeMarketplaceFulfilledOrdersAndLines">Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.) (optional)</param>
        /// <param name="fulfillmentType">Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.&lt;br /&gt;To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true. (optional)</param>
        /// <param name="onlyWithCancellationRequests">Filter on orders containing cancellation requests.&lt;br /&gt;Some channels allow a customer to cancel an order until it has been shipped.&lt;br /&gt;When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation. (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionOfMerchantOrderResponse</returns>
        public async System.Threading.Tasks.Task<CollectionOfMerchantOrderResponse> OrderGetByFilterAsync(List<OrderStatusView> statuses = default(List<OrderStatusView>), List<string> emailAddresses = default(List<string>), List<string> merchantOrderNos = default(List<string>), List<string> channelOrderNos = default(List<string>), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), DateTime? fromCreatedAtDate = default(DateTime?), bool? excludeMarketplaceFulfilledOrdersAndLines = default(bool?), FulfillmentType? fulfillmentType = default(FulfillmentType?), bool? onlyWithCancellationRequests = default(bool?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantOrderResponse> localVarResponse = await OrderGetByFilterWithHttpInfoAsync(statuses, emailAddresses, merchantOrderNos, channelOrderNos, fromDate, toDate, fromCreatedAtDate, excludeMarketplaceFulfilledOrdersAndLines, fulfillmentType, onlyWithCancellationRequests, page, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Orders By Filter. Fetch orders based on the provided OrderFilter.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statuses">Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter. (optional)</param>
        /// <param name="emailAddresses">Client emailaddresses to filter on. (optional)</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant. (optional)</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel. (optional)</param>
        /// <param name="fromDate">Filter on the order date, starting from this date. This date is inclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)</param>
        /// <param name="toDate">Filter on the order date, until this date. This date is exclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)</param>
        /// <param name="fromCreatedAtDate">Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive.&lt;br /&gt;The created date is set on the date and time when the order is created. (optional)</param>
        /// <param name="excludeMarketplaceFulfilledOrdersAndLines">Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.) (optional)</param>
        /// <param name="fulfillmentType">Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.&lt;br /&gt;To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true. (optional)</param>
        /// <param name="onlyWithCancellationRequests">Filter on orders containing cancellation requests.&lt;br /&gt;Some channels allow a customer to cancel an order until it has been shipped.&lt;br /&gt;When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation. (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionOfMerchantOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantOrderResponse>> OrderGetByFilterWithHttpInfoAsync(List<OrderStatusView> statuses = default(List<OrderStatusView>), List<string> emailAddresses = default(List<string>), List<string> merchantOrderNos = default(List<string>), List<string> channelOrderNos = default(List<string>), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), DateTime? fromCreatedAtDate = default(DateTime?), bool? excludeMarketplaceFulfilledOrdersAndLines = default(bool?), FulfillmentType? fulfillmentType = default(FulfillmentType?), bool? onlyWithCancellationRequests = default(bool?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (statuses != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "statuses", statuses));
            }
            if (emailAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "emailAddresses", emailAddresses));
            }
            if (merchantOrderNos != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "merchantOrderNos", merchantOrderNos));
            }
            if (channelOrderNos != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "channelOrderNos", channelOrderNos));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate));
            }
            if (fromCreatedAtDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "fromCreatedAtDate", fromCreatedAtDate));
            }
            if (excludeMarketplaceFulfilledOrdersAndLines != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "excludeMarketplaceFulfilledOrdersAndLines", excludeMarketplaceFulfilledOrdersAndLines));
            }
            if (fulfillmentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "fulfillmentType", fulfillmentType));
            }
            if (onlyWithCancellationRequests != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "onlyWithCancellationRequests", onlyWithCancellationRequests));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionOfMerchantOrderResponse>("/v2/orders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderGetByFilter", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get New Orders. Fetch newly placed orders (order with status NEW).
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CollectionOfMerchantOrderResponse</returns>
        public CollectionOfMerchantOrderResponse OrderGetNew()
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantOrderResponse> localVarResponse = OrderGetNewWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get New Orders. Fetch newly placed orders (order with status NEW).
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CollectionOfMerchantOrderResponse</returns>
        public ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantOrderResponse> OrderGetNewWithHttpInfo()
        {
            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionOfMerchantOrderResponse>("/v2/orders/new", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderGetNew", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get New Orders. Fetch newly placed orders (order with status NEW).
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionOfMerchantOrderResponse</returns>
        public async System.Threading.Tasks.Task<CollectionOfMerchantOrderResponse> OrderGetNewAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantOrderResponse> localVarResponse = await OrderGetNewWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get New Orders. Fetch newly placed orders (order with status NEW).
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionOfMerchantOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantOrderResponse>> OrderGetNewWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionOfMerchantOrderResponse>("/v2/orders/new", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderGetNew", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download Invoice. Generates the ChannelEngine VAT invoice for this order in PDF.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderNo">The unique order reference as used by the merchant.</param>
        /// <param name="useCustomerCulture">Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream OrderInvoice(string merchantOrderNo, bool? useCustomerCulture = default(bool?))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<System.IO.Stream> localVarResponse = OrderInvoiceWithHttpInfo(merchantOrderNo, useCustomerCulture);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download Invoice. Generates the ChannelEngine VAT invoice for this order in PDF.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderNo">The unique order reference as used by the merchant.</param>
        /// <param name="useCustomerCulture">Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ChannelEngine.Merchant.ApiClient.Client.ApiResponse<System.IO.Stream> OrderInvoiceWithHttpInfo(string merchantOrderNo, bool? useCustomerCulture = default(bool?))
        {
            // verify the required parameter 'merchantOrderNo' is set
            if (merchantOrderNo == null)
                throw new ChannelEngine.Merchant.ApiClient.Client.ApiException(400, "Missing required parameter 'merchantOrderNo' when calling OrderApi->OrderInvoice");

            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/pdf",
                "application/json"
            };

            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("merchantOrderNo", ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToString(merchantOrderNo)); // path parameter
            if (useCustomerCulture != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "useCustomerCulture", useCustomerCulture));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/v2/orders/{merchantOrderNo}/invoice", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderInvoice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download Invoice. Generates the ChannelEngine VAT invoice for this order in PDF.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderNo">The unique order reference as used by the merchant.</param>
        /// <param name="useCustomerCulture">Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> OrderInvoiceAsync(string merchantOrderNo, bool? useCustomerCulture = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<System.IO.Stream> localVarResponse = await OrderInvoiceWithHttpInfoAsync(merchantOrderNo, useCustomerCulture, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download Invoice. Generates the ChannelEngine VAT invoice for this order in PDF.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderNo">The unique order reference as used by the merchant.</param>
        /// <param name="useCustomerCulture">Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ChannelEngine.Merchant.ApiClient.Client.ApiResponse<System.IO.Stream>> OrderInvoiceWithHttpInfoAsync(string merchantOrderNo, bool? useCustomerCulture = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'merchantOrderNo' is set
            if (merchantOrderNo == null)
                throw new ChannelEngine.Merchant.ApiClient.Client.ApiException(400, "Missing required parameter 'merchantOrderNo' when calling OrderApi->OrderInvoice");


            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/pdf",
                "application/json"
            };


            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("merchantOrderNo", ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToString(merchantOrderNo)); // path parameter
            if (useCustomerCulture != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "useCustomerCulture", useCustomerCulture));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/v2/orders/{merchantOrderNo}/invoice", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderInvoice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download Packing Slip. Generates the ChannelEngine packing slip for this order in PDF.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderNo">The unique order reference as used by the merchant.</param>
        /// <param name="useCustomerCulture">Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream OrderPackingSlip(string merchantOrderNo, bool? useCustomerCulture = default(bool?))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<System.IO.Stream> localVarResponse = OrderPackingSlipWithHttpInfo(merchantOrderNo, useCustomerCulture);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download Packing Slip. Generates the ChannelEngine packing slip for this order in PDF.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderNo">The unique order reference as used by the merchant.</param>
        /// <param name="useCustomerCulture">Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ChannelEngine.Merchant.ApiClient.Client.ApiResponse<System.IO.Stream> OrderPackingSlipWithHttpInfo(string merchantOrderNo, bool? useCustomerCulture = default(bool?))
        {
            // verify the required parameter 'merchantOrderNo' is set
            if (merchantOrderNo == null)
                throw new ChannelEngine.Merchant.ApiClient.Client.ApiException(400, "Missing required parameter 'merchantOrderNo' when calling OrderApi->OrderPackingSlip");

            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/pdf",
                "application/json"
            };

            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("merchantOrderNo", ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToString(merchantOrderNo)); // path parameter
            if (useCustomerCulture != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "useCustomerCulture", useCustomerCulture));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/v2/orders/{merchantOrderNo}/packingslip", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderPackingSlip", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download Packing Slip. Generates the ChannelEngine packing slip for this order in PDF.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderNo">The unique order reference as used by the merchant.</param>
        /// <param name="useCustomerCulture">Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> OrderPackingSlipAsync(string merchantOrderNo, bool? useCustomerCulture = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<System.IO.Stream> localVarResponse = await OrderPackingSlipWithHttpInfoAsync(merchantOrderNo, useCustomerCulture, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download Packing Slip. Generates the ChannelEngine packing slip for this order in PDF.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderNo">The unique order reference as used by the merchant.</param>
        /// <param name="useCustomerCulture">Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ChannelEngine.Merchant.ApiClient.Client.ApiResponse<System.IO.Stream>> OrderPackingSlipWithHttpInfoAsync(string merchantOrderNo, bool? useCustomerCulture = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'merchantOrderNo' is set
            if (merchantOrderNo == null)
                throw new ChannelEngine.Merchant.ApiClient.Client.ApiException(400, "Missing required parameter 'merchantOrderNo' when calling OrderApi->OrderPackingSlip");


            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/pdf",
                "application/json"
            };


            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("merchantOrderNo", ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToString(merchantOrderNo)); // path parameter
            if (useCustomerCulture != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "useCustomerCulture", useCustomerCulture));
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/v2/orders/{merchantOrderNo}/packingslip", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderPackingSlip", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Comment. Update the merchant comment for an order. Both the ChannelEngine order id as the&lt;br /&gt;merchant order number can be used for updating a comment.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderCommentUpdateRequest"> (optional)</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse OrderUpdate(MerchantOrderCommentUpdateRequest merchantOrderCommentUpdateRequest = default(MerchantOrderCommentUpdateRequest))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse> localVarResponse = OrderUpdateWithHttpInfo(merchantOrderCommentUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Comment. Update the merchant comment for an order. Both the ChannelEngine order id as the&lt;br /&gt;merchant order number can be used for updating a comment.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderCommentUpdateRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse> OrderUpdateWithHttpInfo(MerchantOrderCommentUpdateRequest merchantOrderCommentUpdateRequest = default(MerchantOrderCommentUpdateRequest))
        {
            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = merchantOrderCommentUpdateRequest;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApiResponse>("/v2/orders/comment", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderUpdate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Comment. Update the merchant comment for an order. Both the ChannelEngine order id as the&lt;br /&gt;merchant order number can be used for updating a comment.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderCommentUpdateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> OrderUpdateAsync(MerchantOrderCommentUpdateRequest merchantOrderCommentUpdateRequest = default(MerchantOrderCommentUpdateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse> localVarResponse = await OrderUpdateWithHttpInfoAsync(merchantOrderCommentUpdateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Comment. Update the merchant comment for an order. Both the ChannelEngine order id as the&lt;br /&gt;merchant order number can be used for updating a comment.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderCommentUpdateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse>> OrderUpdateWithHttpInfoAsync(MerchantOrderCommentUpdateRequest merchantOrderCommentUpdateRequest = default(MerchantOrderCommentUpdateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = merchantOrderCommentUpdateRequest;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ApiResponse>("/v2/orders/comment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderUpdate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}

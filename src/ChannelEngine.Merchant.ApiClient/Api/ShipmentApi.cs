/*
 * ChannelEngine Merchant API
 *
 * ChannelEngine API for merchants
 *
 * The version of the OpenAPI document: 2.13.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ChannelEngine.Merchant.ApiClient.Client;
using ChannelEngine.Merchant.ApiClient.Model;

namespace ChannelEngine.Merchant.ApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShipmentApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Shipment.
        /// </summary>
        /// <remarks>
        /// Mark (part of) an order as shipped.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantShipmentRequest"> (optional)</param>
        /// <returns>ApiResponse</returns>
        ApiResponse ShipmentCreate(MerchantShipmentRequest merchantShipmentRequest = default(MerchantShipmentRequest));

        /// <summary>
        /// Create Shipment.
        /// </summary>
        /// <remarks>
        /// Mark (part of) an order as shipped.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantShipmentRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> ShipmentCreateWithHttpInfo(MerchantShipmentRequest merchantShipmentRequest = default(MerchantShipmentRequest));
        /// <summary>
        /// Create shipment for channel provided shipping labels
        /// </summary>
        /// <remarks>
        /// Create a shipment, which will request a shipping label from the channel
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantChannelLabelShipmentRequest">The shipment to create (optional)</param>
        /// <returns>ApiResponse</returns>
        ApiResponse ShipmentCreateForChannelMethod(MerchantChannelLabelShipmentRequest merchantChannelLabelShipmentRequest = default(MerchantChannelLabelShipmentRequest));

        /// <summary>
        /// Create shipment for channel provided shipping labels
        /// </summary>
        /// <remarks>
        /// Create a shipment, which will request a shipping label from the channel
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantChannelLabelShipmentRequest">The shipment to create (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> ShipmentCreateForChannelMethodWithHttpInfo(MerchantChannelLabelShipmentRequest merchantChannelLabelShipmentRequest = default(MerchantChannelLabelShipmentRequest));
        /// <summary>
        /// Get carriers for channel provided shipping labels
        /// </summary>
        /// <remarks>
        /// Get the carriers for buying a shipping label from the channel
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderNo">The merchant&#39;s order reference.</param>
        /// <param name="merchantShipmentLabelCarrierRequest">The parcel information (optional)</param>
        /// <returns>CollectionOfMerchantShipmentLabelCarrierResponse</returns>
        CollectionOfMerchantShipmentLabelCarrierResponse ShipmentGetShipmentLabelCarriers(string merchantOrderNo, MerchantShipmentLabelCarrierRequest merchantShipmentLabelCarrierRequest = default(MerchantShipmentLabelCarrierRequest));

        /// <summary>
        /// Get carriers for channel provided shipping labels
        /// </summary>
        /// <remarks>
        /// Get the carriers for buying a shipping label from the channel
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderNo">The merchant&#39;s order reference.</param>
        /// <param name="merchantShipmentLabelCarrierRequest">The parcel information (optional)</param>
        /// <returns>ApiResponse of CollectionOfMerchantShipmentLabelCarrierResponse</returns>
        ApiResponse<CollectionOfMerchantShipmentLabelCarrierResponse> ShipmentGetShipmentLabelCarriersWithHttpInfo(string merchantOrderNo, MerchantShipmentLabelCarrierRequest merchantShipmentLabelCarrierRequest = default(MerchantShipmentLabelCarrierRequest));
        /// <summary>
        /// Get Shipments
        /// </summary>
        /// <remarks>
        /// Gets all shipments that meet conditions.&lt;br /&gt;If all filters are empty return all in default order (from the oldest one).
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantShipmentNos">Filter on the unique references (ids) as used by the merchant. (optional)</param>
        /// <param name="merchantOrderNos">Filter on the unique references (ids) of order as used by the merchant. (optional)</param>
        /// <param name="method">Filter on the shipping method. (optional)</param>
        /// <param name="shippedFromCountryCodes">2-digit Country code (optional)</param>
        /// <param name="fromShipmentDate">Filter on the shipment date, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toShipmentDate">Filter on the shipment date, until this date. This date is exclusive. (optional)</param>
        /// <param name="fromCreateDate">Filter on the create date of the shipment in ChannelEngine, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toCreateDate">Filter on the create date of the shipment in ChannelEngine, until this date. This date is exclusive. (optional)</param>
        /// <param name="fromUpdateDate">Filter on the update date of the shipment in ChannelEngine, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toUpdateDate">Filter on the update date of the shipment in ChannelEngine, until this date. This date is exclusive. (optional)</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the shipment. (optional)</param>
        /// <param name="channelShipmentNos">Filter on the unique references (ids) as used by the channel. (optional)</param>
        /// <param name="channelOrderNos">Filter on the unique references (ids) of order as used by the channel. (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <returns>CollectionOfMerchantShipmentResponse</returns>
        CollectionOfMerchantShipmentResponse ShipmentIndex(List<string> merchantShipmentNos = default(List<string>), List<string> merchantOrderNos = default(List<string>), string method = default(string), List<string> shippedFromCountryCodes = default(List<string>), DateTime? fromShipmentDate = default(DateTime?), DateTime? toShipmentDate = default(DateTime?), DateTime? fromCreateDate = default(DateTime?), DateTime? toCreateDate = default(DateTime?), DateTime? fromUpdateDate = default(DateTime?), DateTime? toUpdateDate = default(DateTime?), ShipmentFulfillmentType? fulfillmentType = default(ShipmentFulfillmentType?), List<string> channelShipmentNos = default(List<string>), List<string> channelOrderNos = default(List<string>), int? page = default(int?));

        /// <summary>
        /// Get Shipments
        /// </summary>
        /// <remarks>
        /// Gets all shipments that meet conditions.&lt;br /&gt;If all filters are empty return all in default order (from the oldest one).
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantShipmentNos">Filter on the unique references (ids) as used by the merchant. (optional)</param>
        /// <param name="merchantOrderNos">Filter on the unique references (ids) of order as used by the merchant. (optional)</param>
        /// <param name="method">Filter on the shipping method. (optional)</param>
        /// <param name="shippedFromCountryCodes">2-digit Country code (optional)</param>
        /// <param name="fromShipmentDate">Filter on the shipment date, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toShipmentDate">Filter on the shipment date, until this date. This date is exclusive. (optional)</param>
        /// <param name="fromCreateDate">Filter on the create date of the shipment in ChannelEngine, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toCreateDate">Filter on the create date of the shipment in ChannelEngine, until this date. This date is exclusive. (optional)</param>
        /// <param name="fromUpdateDate">Filter on the update date of the shipment in ChannelEngine, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toUpdateDate">Filter on the update date of the shipment in ChannelEngine, until this date. This date is exclusive. (optional)</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the shipment. (optional)</param>
        /// <param name="channelShipmentNos">Filter on the unique references (ids) as used by the channel. (optional)</param>
        /// <param name="channelOrderNos">Filter on the unique references (ids) of order as used by the channel. (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <returns>ApiResponse of CollectionOfMerchantShipmentResponse</returns>
        ApiResponse<CollectionOfMerchantShipmentResponse> ShipmentIndexWithHttpInfo(List<string> merchantShipmentNos = default(List<string>), List<string> merchantOrderNos = default(List<string>), string method = default(string), List<string> shippedFromCountryCodes = default(List<string>), DateTime? fromShipmentDate = default(DateTime?), DateTime? toShipmentDate = default(DateTime?), DateTime? fromCreateDate = default(DateTime?), DateTime? toCreateDate = default(DateTime?), DateTime? fromUpdateDate = default(DateTime?), DateTime? toUpdateDate = default(DateTime?), ShipmentFulfillmentType? fulfillmentType = default(ShipmentFulfillmentType?), List<string> channelShipmentNos = default(List<string>), List<string> channelOrderNos = default(List<string>), int? page = default(int?));
        /// <summary>
        /// Download shipping label.
        /// </summary>
        /// <remarks>
        /// Downloads the shipping label for the shipment. There may pass some time between creating the shipment&lt;br /&gt;and the availability of the label. So &#39;404 Not Found&#39; might incidate it is not available yet.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantShipmentNo">The unique shipment reference as used by the merchant.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream ShipmentShippingLabel(string merchantShipmentNo);

        /// <summary>
        /// Download shipping label.
        /// </summary>
        /// <remarks>
        /// Downloads the shipping label for the shipment. There may pass some time between creating the shipment&lt;br /&gt;and the availability of the label. So &#39;404 Not Found&#39; might incidate it is not available yet.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantShipmentNo">The unique shipment reference as used by the merchant.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> ShipmentShippingLabelWithHttpInfo(string merchantShipmentNo);
        /// <summary>
        /// Update Shipment.
        /// </summary>
        /// <remarks>
        /// Update an existing shipment with tracking information.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantShipmentNo">The merchant&#39;s shipment reference.</param>
        /// <param name="merchantShipmentTrackingRequest">The updated tracking information. (optional)</param>
        /// <returns>ApiResponse</returns>
        ApiResponse ShipmentUpdate(string merchantShipmentNo, MerchantShipmentTrackingRequest merchantShipmentTrackingRequest = default(MerchantShipmentTrackingRequest));

        /// <summary>
        /// Update Shipment.
        /// </summary>
        /// <remarks>
        /// Update an existing shipment with tracking information.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantShipmentNo">The merchant&#39;s shipment reference.</param>
        /// <param name="merchantShipmentTrackingRequest">The updated tracking information. (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> ShipmentUpdateWithHttpInfo(string merchantShipmentNo, MerchantShipmentTrackingRequest merchantShipmentTrackingRequest = default(MerchantShipmentTrackingRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShipmentApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Shipment.
        /// </summary>
        /// <remarks>
        /// Mark (part of) an order as shipped.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantShipmentRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> ShipmentCreateAsync(MerchantShipmentRequest merchantShipmentRequest = default(MerchantShipmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Shipment.
        /// </summary>
        /// <remarks>
        /// Mark (part of) an order as shipped.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantShipmentRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ShipmentCreateWithHttpInfoAsync(MerchantShipmentRequest merchantShipmentRequest = default(MerchantShipmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create shipment for channel provided shipping labels
        /// </summary>
        /// <remarks>
        /// Create a shipment, which will request a shipping label from the channel
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantChannelLabelShipmentRequest">The shipment to create (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> ShipmentCreateForChannelMethodAsync(MerchantChannelLabelShipmentRequest merchantChannelLabelShipmentRequest = default(MerchantChannelLabelShipmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create shipment for channel provided shipping labels
        /// </summary>
        /// <remarks>
        /// Create a shipment, which will request a shipping label from the channel
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantChannelLabelShipmentRequest">The shipment to create (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ShipmentCreateForChannelMethodWithHttpInfoAsync(MerchantChannelLabelShipmentRequest merchantChannelLabelShipmentRequest = default(MerchantChannelLabelShipmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get carriers for channel provided shipping labels
        /// </summary>
        /// <remarks>
        /// Get the carriers for buying a shipping label from the channel
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderNo">The merchant&#39;s order reference.</param>
        /// <param name="merchantShipmentLabelCarrierRequest">The parcel information (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionOfMerchantShipmentLabelCarrierResponse</returns>
        System.Threading.Tasks.Task<CollectionOfMerchantShipmentLabelCarrierResponse> ShipmentGetShipmentLabelCarriersAsync(string merchantOrderNo, MerchantShipmentLabelCarrierRequest merchantShipmentLabelCarrierRequest = default(MerchantShipmentLabelCarrierRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get carriers for channel provided shipping labels
        /// </summary>
        /// <remarks>
        /// Get the carriers for buying a shipping label from the channel
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderNo">The merchant&#39;s order reference.</param>
        /// <param name="merchantShipmentLabelCarrierRequest">The parcel information (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionOfMerchantShipmentLabelCarrierResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionOfMerchantShipmentLabelCarrierResponse>> ShipmentGetShipmentLabelCarriersWithHttpInfoAsync(string merchantOrderNo, MerchantShipmentLabelCarrierRequest merchantShipmentLabelCarrierRequest = default(MerchantShipmentLabelCarrierRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Shipments
        /// </summary>
        /// <remarks>
        /// Gets all shipments that meet conditions.&lt;br /&gt;If all filters are empty return all in default order (from the oldest one).
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantShipmentNos">Filter on the unique references (ids) as used by the merchant. (optional)</param>
        /// <param name="merchantOrderNos">Filter on the unique references (ids) of order as used by the merchant. (optional)</param>
        /// <param name="method">Filter on the shipping method. (optional)</param>
        /// <param name="shippedFromCountryCodes">2-digit Country code (optional)</param>
        /// <param name="fromShipmentDate">Filter on the shipment date, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toShipmentDate">Filter on the shipment date, until this date. This date is exclusive. (optional)</param>
        /// <param name="fromCreateDate">Filter on the create date of the shipment in ChannelEngine, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toCreateDate">Filter on the create date of the shipment in ChannelEngine, until this date. This date is exclusive. (optional)</param>
        /// <param name="fromUpdateDate">Filter on the update date of the shipment in ChannelEngine, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toUpdateDate">Filter on the update date of the shipment in ChannelEngine, until this date. This date is exclusive. (optional)</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the shipment. (optional)</param>
        /// <param name="channelShipmentNos">Filter on the unique references (ids) as used by the channel. (optional)</param>
        /// <param name="channelOrderNos">Filter on the unique references (ids) of order as used by the channel. (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionOfMerchantShipmentResponse</returns>
        System.Threading.Tasks.Task<CollectionOfMerchantShipmentResponse> ShipmentIndexAsync(List<string> merchantShipmentNos = default(List<string>), List<string> merchantOrderNos = default(List<string>), string method = default(string), List<string> shippedFromCountryCodes = default(List<string>), DateTime? fromShipmentDate = default(DateTime?), DateTime? toShipmentDate = default(DateTime?), DateTime? fromCreateDate = default(DateTime?), DateTime? toCreateDate = default(DateTime?), DateTime? fromUpdateDate = default(DateTime?), DateTime? toUpdateDate = default(DateTime?), ShipmentFulfillmentType? fulfillmentType = default(ShipmentFulfillmentType?), List<string> channelShipmentNos = default(List<string>), List<string> channelOrderNos = default(List<string>), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Shipments
        /// </summary>
        /// <remarks>
        /// Gets all shipments that meet conditions.&lt;br /&gt;If all filters are empty return all in default order (from the oldest one).
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantShipmentNos">Filter on the unique references (ids) as used by the merchant. (optional)</param>
        /// <param name="merchantOrderNos">Filter on the unique references (ids) of order as used by the merchant. (optional)</param>
        /// <param name="method">Filter on the shipping method. (optional)</param>
        /// <param name="shippedFromCountryCodes">2-digit Country code (optional)</param>
        /// <param name="fromShipmentDate">Filter on the shipment date, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toShipmentDate">Filter on the shipment date, until this date. This date is exclusive. (optional)</param>
        /// <param name="fromCreateDate">Filter on the create date of the shipment in ChannelEngine, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toCreateDate">Filter on the create date of the shipment in ChannelEngine, until this date. This date is exclusive. (optional)</param>
        /// <param name="fromUpdateDate">Filter on the update date of the shipment in ChannelEngine, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toUpdateDate">Filter on the update date of the shipment in ChannelEngine, until this date. This date is exclusive. (optional)</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the shipment. (optional)</param>
        /// <param name="channelShipmentNos">Filter on the unique references (ids) as used by the channel. (optional)</param>
        /// <param name="channelOrderNos">Filter on the unique references (ids) of order as used by the channel. (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionOfMerchantShipmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionOfMerchantShipmentResponse>> ShipmentIndexWithHttpInfoAsync(List<string> merchantShipmentNos = default(List<string>), List<string> merchantOrderNos = default(List<string>), string method = default(string), List<string> shippedFromCountryCodes = default(List<string>), DateTime? fromShipmentDate = default(DateTime?), DateTime? toShipmentDate = default(DateTime?), DateTime? fromCreateDate = default(DateTime?), DateTime? toCreateDate = default(DateTime?), DateTime? fromUpdateDate = default(DateTime?), DateTime? toUpdateDate = default(DateTime?), ShipmentFulfillmentType? fulfillmentType = default(ShipmentFulfillmentType?), List<string> channelShipmentNos = default(List<string>), List<string> channelOrderNos = default(List<string>), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Download shipping label.
        /// </summary>
        /// <remarks>
        /// Downloads the shipping label for the shipment. There may pass some time between creating the shipment&lt;br /&gt;and the availability of the label. So &#39;404 Not Found&#39; might incidate it is not available yet.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantShipmentNo">The unique shipment reference as used by the merchant.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> ShipmentShippingLabelAsync(string merchantShipmentNo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Download shipping label.
        /// </summary>
        /// <remarks>
        /// Downloads the shipping label for the shipment. There may pass some time between creating the shipment&lt;br /&gt;and the availability of the label. So &#39;404 Not Found&#39; might incidate it is not available yet.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantShipmentNo">The unique shipment reference as used by the merchant.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ShipmentShippingLabelWithHttpInfoAsync(string merchantShipmentNo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Shipment.
        /// </summary>
        /// <remarks>
        /// Update an existing shipment with tracking information.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantShipmentNo">The merchant&#39;s shipment reference.</param>
        /// <param name="merchantShipmentTrackingRequest">The updated tracking information. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> ShipmentUpdateAsync(string merchantShipmentNo, MerchantShipmentTrackingRequest merchantShipmentTrackingRequest = default(MerchantShipmentTrackingRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Shipment.
        /// </summary>
        /// <remarks>
        /// Update an existing shipment with tracking information.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantShipmentNo">The merchant&#39;s shipment reference.</param>
        /// <param name="merchantShipmentTrackingRequest">The updated tracking information. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ShipmentUpdateWithHttpInfoAsync(string merchantShipmentNo, MerchantShipmentTrackingRequest merchantShipmentTrackingRequest = default(MerchantShipmentTrackingRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShipmentApi : IShipmentApiSync, IShipmentApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ShipmentApi : IShipmentApi
    {
        private ChannelEngine.Merchant.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ShipmentApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ShipmentApi(string basePath)
        {
            this.Configuration = ChannelEngine.Merchant.ApiClient.Client.Configuration.MergeConfigurations(
                ChannelEngine.Merchant.ApiClient.Client.GlobalConfiguration.Instance,
                new ChannelEngine.Merchant.ApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ChannelEngine.Merchant.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ChannelEngine.Merchant.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ChannelEngine.Merchant.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ShipmentApi(ChannelEngine.Merchant.ApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ChannelEngine.Merchant.ApiClient.Client.Configuration.MergeConfigurations(
                ChannelEngine.Merchant.ApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ChannelEngine.Merchant.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ChannelEngine.Merchant.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ChannelEngine.Merchant.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ShipmentApi(ChannelEngine.Merchant.ApiClient.Client.ISynchronousClient client, ChannelEngine.Merchant.ApiClient.Client.IAsynchronousClient asyncClient, ChannelEngine.Merchant.ApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ChannelEngine.Merchant.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ChannelEngine.Merchant.ApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ChannelEngine.Merchant.ApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ChannelEngine.Merchant.ApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ChannelEngine.Merchant.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Shipment. Mark (part of) an order as shipped.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantShipmentRequest"> (optional)</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse ShipmentCreate(MerchantShipmentRequest merchantShipmentRequest = default(MerchantShipmentRequest))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse> localVarResponse = ShipmentCreateWithHttpInfo(merchantShipmentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Shipment. Mark (part of) an order as shipped.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantShipmentRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse> ShipmentCreateWithHttpInfo(MerchantShipmentRequest merchantShipmentRequest = default(MerchantShipmentRequest))
        {
            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = merchantShipmentRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/v2/shipments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipmentCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Shipment. Mark (part of) an order as shipped.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantShipmentRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> ShipmentCreateAsync(MerchantShipmentRequest merchantShipmentRequest = default(MerchantShipmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse> localVarResponse = await ShipmentCreateWithHttpInfoAsync(merchantShipmentRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Shipment. Mark (part of) an order as shipped.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantShipmentRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse>> ShipmentCreateWithHttpInfoAsync(MerchantShipmentRequest merchantShipmentRequest = default(MerchantShipmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = merchantShipmentRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/v2/shipments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipmentCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create shipment for channel provided shipping labels Create a shipment, which will request a shipping label from the channel
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantChannelLabelShipmentRequest">The shipment to create (optional)</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse ShipmentCreateForChannelMethod(MerchantChannelLabelShipmentRequest merchantChannelLabelShipmentRequest = default(MerchantChannelLabelShipmentRequest))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse> localVarResponse = ShipmentCreateForChannelMethodWithHttpInfo(merchantChannelLabelShipmentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create shipment for channel provided shipping labels Create a shipment, which will request a shipping label from the channel
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantChannelLabelShipmentRequest">The shipment to create (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse> ShipmentCreateForChannelMethodWithHttpInfo(MerchantChannelLabelShipmentRequest merchantChannelLabelShipmentRequest = default(MerchantChannelLabelShipmentRequest))
        {
            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = merchantChannelLabelShipmentRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/v2/shipments/channelmethod", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipmentCreateForChannelMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create shipment for channel provided shipping labels Create a shipment, which will request a shipping label from the channel
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantChannelLabelShipmentRequest">The shipment to create (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> ShipmentCreateForChannelMethodAsync(MerchantChannelLabelShipmentRequest merchantChannelLabelShipmentRequest = default(MerchantChannelLabelShipmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse> localVarResponse = await ShipmentCreateForChannelMethodWithHttpInfoAsync(merchantChannelLabelShipmentRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create shipment for channel provided shipping labels Create a shipment, which will request a shipping label from the channel
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantChannelLabelShipmentRequest">The shipment to create (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse>> ShipmentCreateForChannelMethodWithHttpInfoAsync(MerchantChannelLabelShipmentRequest merchantChannelLabelShipmentRequest = default(MerchantChannelLabelShipmentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = merchantChannelLabelShipmentRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/v2/shipments/channelmethod", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipmentCreateForChannelMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get carriers for channel provided shipping labels Get the carriers for buying a shipping label from the channel
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderNo">The merchant&#39;s order reference.</param>
        /// <param name="merchantShipmentLabelCarrierRequest">The parcel information (optional)</param>
        /// <returns>CollectionOfMerchantShipmentLabelCarrierResponse</returns>
        public CollectionOfMerchantShipmentLabelCarrierResponse ShipmentGetShipmentLabelCarriers(string merchantOrderNo, MerchantShipmentLabelCarrierRequest merchantShipmentLabelCarrierRequest = default(MerchantShipmentLabelCarrierRequest))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantShipmentLabelCarrierResponse> localVarResponse = ShipmentGetShipmentLabelCarriersWithHttpInfo(merchantOrderNo, merchantShipmentLabelCarrierRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get carriers for channel provided shipping labels Get the carriers for buying a shipping label from the channel
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderNo">The merchant&#39;s order reference.</param>
        /// <param name="merchantShipmentLabelCarrierRequest">The parcel information (optional)</param>
        /// <returns>ApiResponse of CollectionOfMerchantShipmentLabelCarrierResponse</returns>
        public ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantShipmentLabelCarrierResponse> ShipmentGetShipmentLabelCarriersWithHttpInfo(string merchantOrderNo, MerchantShipmentLabelCarrierRequest merchantShipmentLabelCarrierRequest = default(MerchantShipmentLabelCarrierRequest))
        {
            // verify the required parameter 'merchantOrderNo' is set
            if (merchantOrderNo == null)
                throw new ChannelEngine.Merchant.ApiClient.Client.ApiException(400, "Missing required parameter 'merchantOrderNo' when calling ShipmentApi->ShipmentGetShipmentLabelCarriers");

            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("merchantOrderNo", ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToString(merchantOrderNo)); // path parameter
            localVarRequestOptions.Data = merchantShipmentLabelCarrierRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CollectionOfMerchantShipmentLabelCarrierResponse>("/v2/carriers/{merchantOrderNo}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipmentGetShipmentLabelCarriers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get carriers for channel provided shipping labels Get the carriers for buying a shipping label from the channel
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderNo">The merchant&#39;s order reference.</param>
        /// <param name="merchantShipmentLabelCarrierRequest">The parcel information (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionOfMerchantShipmentLabelCarrierResponse</returns>
        public async System.Threading.Tasks.Task<CollectionOfMerchantShipmentLabelCarrierResponse> ShipmentGetShipmentLabelCarriersAsync(string merchantOrderNo, MerchantShipmentLabelCarrierRequest merchantShipmentLabelCarrierRequest = default(MerchantShipmentLabelCarrierRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantShipmentLabelCarrierResponse> localVarResponse = await ShipmentGetShipmentLabelCarriersWithHttpInfoAsync(merchantOrderNo, merchantShipmentLabelCarrierRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get carriers for channel provided shipping labels Get the carriers for buying a shipping label from the channel
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderNo">The merchant&#39;s order reference.</param>
        /// <param name="merchantShipmentLabelCarrierRequest">The parcel information (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionOfMerchantShipmentLabelCarrierResponse)</returns>
        public async System.Threading.Tasks.Task<ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantShipmentLabelCarrierResponse>> ShipmentGetShipmentLabelCarriersWithHttpInfoAsync(string merchantOrderNo, MerchantShipmentLabelCarrierRequest merchantShipmentLabelCarrierRequest = default(MerchantShipmentLabelCarrierRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'merchantOrderNo' is set
            if (merchantOrderNo == null)
                throw new ChannelEngine.Merchant.ApiClient.Client.ApiException(400, "Missing required parameter 'merchantOrderNo' when calling ShipmentApi->ShipmentGetShipmentLabelCarriers");


            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("merchantOrderNo", ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToString(merchantOrderNo)); // path parameter
            localVarRequestOptions.Data = merchantShipmentLabelCarrierRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CollectionOfMerchantShipmentLabelCarrierResponse>("/v2/carriers/{merchantOrderNo}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipmentGetShipmentLabelCarriers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Shipments Gets all shipments that meet conditions.&lt;br /&gt;If all filters are empty return all in default order (from the oldest one).
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantShipmentNos">Filter on the unique references (ids) as used by the merchant. (optional)</param>
        /// <param name="merchantOrderNos">Filter on the unique references (ids) of order as used by the merchant. (optional)</param>
        /// <param name="method">Filter on the shipping method. (optional)</param>
        /// <param name="shippedFromCountryCodes">2-digit Country code (optional)</param>
        /// <param name="fromShipmentDate">Filter on the shipment date, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toShipmentDate">Filter on the shipment date, until this date. This date is exclusive. (optional)</param>
        /// <param name="fromCreateDate">Filter on the create date of the shipment in ChannelEngine, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toCreateDate">Filter on the create date of the shipment in ChannelEngine, until this date. This date is exclusive. (optional)</param>
        /// <param name="fromUpdateDate">Filter on the update date of the shipment in ChannelEngine, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toUpdateDate">Filter on the update date of the shipment in ChannelEngine, until this date. This date is exclusive. (optional)</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the shipment. (optional)</param>
        /// <param name="channelShipmentNos">Filter on the unique references (ids) as used by the channel. (optional)</param>
        /// <param name="channelOrderNos">Filter on the unique references (ids) of order as used by the channel. (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <returns>CollectionOfMerchantShipmentResponse</returns>
        public CollectionOfMerchantShipmentResponse ShipmentIndex(List<string> merchantShipmentNos = default(List<string>), List<string> merchantOrderNos = default(List<string>), string method = default(string), List<string> shippedFromCountryCodes = default(List<string>), DateTime? fromShipmentDate = default(DateTime?), DateTime? toShipmentDate = default(DateTime?), DateTime? fromCreateDate = default(DateTime?), DateTime? toCreateDate = default(DateTime?), DateTime? fromUpdateDate = default(DateTime?), DateTime? toUpdateDate = default(DateTime?), ShipmentFulfillmentType? fulfillmentType = default(ShipmentFulfillmentType?), List<string> channelShipmentNos = default(List<string>), List<string> channelOrderNos = default(List<string>), int? page = default(int?))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantShipmentResponse> localVarResponse = ShipmentIndexWithHttpInfo(merchantShipmentNos, merchantOrderNos, method, shippedFromCountryCodes, fromShipmentDate, toShipmentDate, fromCreateDate, toCreateDate, fromUpdateDate, toUpdateDate, fulfillmentType, channelShipmentNos, channelOrderNos, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Shipments Gets all shipments that meet conditions.&lt;br /&gt;If all filters are empty return all in default order (from the oldest one).
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantShipmentNos">Filter on the unique references (ids) as used by the merchant. (optional)</param>
        /// <param name="merchantOrderNos">Filter on the unique references (ids) of order as used by the merchant. (optional)</param>
        /// <param name="method">Filter on the shipping method. (optional)</param>
        /// <param name="shippedFromCountryCodes">2-digit Country code (optional)</param>
        /// <param name="fromShipmentDate">Filter on the shipment date, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toShipmentDate">Filter on the shipment date, until this date. This date is exclusive. (optional)</param>
        /// <param name="fromCreateDate">Filter on the create date of the shipment in ChannelEngine, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toCreateDate">Filter on the create date of the shipment in ChannelEngine, until this date. This date is exclusive. (optional)</param>
        /// <param name="fromUpdateDate">Filter on the update date of the shipment in ChannelEngine, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toUpdateDate">Filter on the update date of the shipment in ChannelEngine, until this date. This date is exclusive. (optional)</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the shipment. (optional)</param>
        /// <param name="channelShipmentNos">Filter on the unique references (ids) as used by the channel. (optional)</param>
        /// <param name="channelOrderNos">Filter on the unique references (ids) of order as used by the channel. (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <returns>ApiResponse of CollectionOfMerchantShipmentResponse</returns>
        public ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantShipmentResponse> ShipmentIndexWithHttpInfo(List<string> merchantShipmentNos = default(List<string>), List<string> merchantOrderNos = default(List<string>), string method = default(string), List<string> shippedFromCountryCodes = default(List<string>), DateTime? fromShipmentDate = default(DateTime?), DateTime? toShipmentDate = default(DateTime?), DateTime? fromCreateDate = default(DateTime?), DateTime? toCreateDate = default(DateTime?), DateTime? fromUpdateDate = default(DateTime?), DateTime? toUpdateDate = default(DateTime?), ShipmentFulfillmentType? fulfillmentType = default(ShipmentFulfillmentType?), List<string> channelShipmentNos = default(List<string>), List<string> channelOrderNos = default(List<string>), int? page = default(int?))
        {
            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (merchantShipmentNos != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "merchantShipmentNos", merchantShipmentNos));
            }
            if (merchantOrderNos != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "merchantOrderNos", merchantOrderNos));
            }
            if (method != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "method", method));
            }
            if (shippedFromCountryCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "shippedFromCountryCodes", shippedFromCountryCodes));
            }
            if (fromShipmentDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "fromShipmentDate", fromShipmentDate));
            }
            if (toShipmentDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "toShipmentDate", toShipmentDate));
            }
            if (fromCreateDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "fromCreateDate", fromCreateDate));
            }
            if (toCreateDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "toCreateDate", toCreateDate));
            }
            if (fromUpdateDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "fromUpdateDate", fromUpdateDate));
            }
            if (toUpdateDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "toUpdateDate", toUpdateDate));
            }
            if (fulfillmentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "fulfillmentType", fulfillmentType));
            }
            if (channelShipmentNos != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "channelShipmentNos", channelShipmentNos));
            }
            if (channelOrderNos != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "channelOrderNos", channelOrderNos));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionOfMerchantShipmentResponse>("/v2/shipments/merchant", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipmentIndex", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Shipments Gets all shipments that meet conditions.&lt;br /&gt;If all filters are empty return all in default order (from the oldest one).
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantShipmentNos">Filter on the unique references (ids) as used by the merchant. (optional)</param>
        /// <param name="merchantOrderNos">Filter on the unique references (ids) of order as used by the merchant. (optional)</param>
        /// <param name="method">Filter on the shipping method. (optional)</param>
        /// <param name="shippedFromCountryCodes">2-digit Country code (optional)</param>
        /// <param name="fromShipmentDate">Filter on the shipment date, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toShipmentDate">Filter on the shipment date, until this date. This date is exclusive. (optional)</param>
        /// <param name="fromCreateDate">Filter on the create date of the shipment in ChannelEngine, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toCreateDate">Filter on the create date of the shipment in ChannelEngine, until this date. This date is exclusive. (optional)</param>
        /// <param name="fromUpdateDate">Filter on the update date of the shipment in ChannelEngine, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toUpdateDate">Filter on the update date of the shipment in ChannelEngine, until this date. This date is exclusive. (optional)</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the shipment. (optional)</param>
        /// <param name="channelShipmentNos">Filter on the unique references (ids) as used by the channel. (optional)</param>
        /// <param name="channelOrderNos">Filter on the unique references (ids) of order as used by the channel. (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionOfMerchantShipmentResponse</returns>
        public async System.Threading.Tasks.Task<CollectionOfMerchantShipmentResponse> ShipmentIndexAsync(List<string> merchantShipmentNos = default(List<string>), List<string> merchantOrderNos = default(List<string>), string method = default(string), List<string> shippedFromCountryCodes = default(List<string>), DateTime? fromShipmentDate = default(DateTime?), DateTime? toShipmentDate = default(DateTime?), DateTime? fromCreateDate = default(DateTime?), DateTime? toCreateDate = default(DateTime?), DateTime? fromUpdateDate = default(DateTime?), DateTime? toUpdateDate = default(DateTime?), ShipmentFulfillmentType? fulfillmentType = default(ShipmentFulfillmentType?), List<string> channelShipmentNos = default(List<string>), List<string> channelOrderNos = default(List<string>), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantShipmentResponse> localVarResponse = await ShipmentIndexWithHttpInfoAsync(merchantShipmentNos, merchantOrderNos, method, shippedFromCountryCodes, fromShipmentDate, toShipmentDate, fromCreateDate, toCreateDate, fromUpdateDate, toUpdateDate, fulfillmentType, channelShipmentNos, channelOrderNos, page, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Shipments Gets all shipments that meet conditions.&lt;br /&gt;If all filters are empty return all in default order (from the oldest one).
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantShipmentNos">Filter on the unique references (ids) as used by the merchant. (optional)</param>
        /// <param name="merchantOrderNos">Filter on the unique references (ids) of order as used by the merchant. (optional)</param>
        /// <param name="method">Filter on the shipping method. (optional)</param>
        /// <param name="shippedFromCountryCodes">2-digit Country code (optional)</param>
        /// <param name="fromShipmentDate">Filter on the shipment date, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toShipmentDate">Filter on the shipment date, until this date. This date is exclusive. (optional)</param>
        /// <param name="fromCreateDate">Filter on the create date of the shipment in ChannelEngine, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toCreateDate">Filter on the create date of the shipment in ChannelEngine, until this date. This date is exclusive. (optional)</param>
        /// <param name="fromUpdateDate">Filter on the update date of the shipment in ChannelEngine, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toUpdateDate">Filter on the update date of the shipment in ChannelEngine, until this date. This date is exclusive. (optional)</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the shipment. (optional)</param>
        /// <param name="channelShipmentNos">Filter on the unique references (ids) as used by the channel. (optional)</param>
        /// <param name="channelOrderNos">Filter on the unique references (ids) of order as used by the channel. (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionOfMerchantShipmentResponse)</returns>
        public async System.Threading.Tasks.Task<ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantShipmentResponse>> ShipmentIndexWithHttpInfoAsync(List<string> merchantShipmentNos = default(List<string>), List<string> merchantOrderNos = default(List<string>), string method = default(string), List<string> shippedFromCountryCodes = default(List<string>), DateTime? fromShipmentDate = default(DateTime?), DateTime? toShipmentDate = default(DateTime?), DateTime? fromCreateDate = default(DateTime?), DateTime? toCreateDate = default(DateTime?), DateTime? fromUpdateDate = default(DateTime?), DateTime? toUpdateDate = default(DateTime?), ShipmentFulfillmentType? fulfillmentType = default(ShipmentFulfillmentType?), List<string> channelShipmentNos = default(List<string>), List<string> channelOrderNos = default(List<string>), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (merchantShipmentNos != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "merchantShipmentNos", merchantShipmentNos));
            }
            if (merchantOrderNos != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "merchantOrderNos", merchantOrderNos));
            }
            if (method != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "method", method));
            }
            if (shippedFromCountryCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "shippedFromCountryCodes", shippedFromCountryCodes));
            }
            if (fromShipmentDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "fromShipmentDate", fromShipmentDate));
            }
            if (toShipmentDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "toShipmentDate", toShipmentDate));
            }
            if (fromCreateDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "fromCreateDate", fromCreateDate));
            }
            if (toCreateDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "toCreateDate", toCreateDate));
            }
            if (fromUpdateDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "fromUpdateDate", fromUpdateDate));
            }
            if (toUpdateDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "toUpdateDate", toUpdateDate));
            }
            if (fulfillmentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "fulfillmentType", fulfillmentType));
            }
            if (channelShipmentNos != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "channelShipmentNos", channelShipmentNos));
            }
            if (channelOrderNos != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "channelOrderNos", channelOrderNos));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionOfMerchantShipmentResponse>("/v2/shipments/merchant", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipmentIndex", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download shipping label. Downloads the shipping label for the shipment. There may pass some time between creating the shipment&lt;br /&gt;and the availability of the label. So &#39;404 Not Found&#39; might incidate it is not available yet.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantShipmentNo">The unique shipment reference as used by the merchant.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream ShipmentShippingLabel(string merchantShipmentNo)
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<System.IO.Stream> localVarResponse = ShipmentShippingLabelWithHttpInfo(merchantShipmentNo);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download shipping label. Downloads the shipping label for the shipment. There may pass some time between creating the shipment&lt;br /&gt;and the availability of the label. So &#39;404 Not Found&#39; might incidate it is not available yet.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantShipmentNo">The unique shipment reference as used by the merchant.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ChannelEngine.Merchant.ApiClient.Client.ApiResponse<System.IO.Stream> ShipmentShippingLabelWithHttpInfo(string merchantShipmentNo)
        {
            // verify the required parameter 'merchantShipmentNo' is set
            if (merchantShipmentNo == null)
                throw new ChannelEngine.Merchant.ApiClient.Client.ApiException(400, "Missing required parameter 'merchantShipmentNo' when calling ShipmentApi->ShipmentShippingLabel");

            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.shippingLabel",
                "application/json"
            };

            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("merchantShipmentNo", ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToString(merchantShipmentNo)); // path parameter

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/v2/orders/{merchantShipmentNo}/shippinglabel", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipmentShippingLabel", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download shipping label. Downloads the shipping label for the shipment. There may pass some time between creating the shipment&lt;br /&gt;and the availability of the label. So &#39;404 Not Found&#39; might incidate it is not available yet.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantShipmentNo">The unique shipment reference as used by the merchant.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> ShipmentShippingLabelAsync(string merchantShipmentNo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<System.IO.Stream> localVarResponse = await ShipmentShippingLabelWithHttpInfoAsync(merchantShipmentNo, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download shipping label. Downloads the shipping label for the shipment. There may pass some time between creating the shipment&lt;br /&gt;and the availability of the label. So &#39;404 Not Found&#39; might incidate it is not available yet.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantShipmentNo">The unique shipment reference as used by the merchant.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ChannelEngine.Merchant.ApiClient.Client.ApiResponse<System.IO.Stream>> ShipmentShippingLabelWithHttpInfoAsync(string merchantShipmentNo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'merchantShipmentNo' is set
            if (merchantShipmentNo == null)
                throw new ChannelEngine.Merchant.ApiClient.Client.ApiException(400, "Missing required parameter 'merchantShipmentNo' when calling ShipmentApi->ShipmentShippingLabel");


            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.shippingLabel",
                "application/json"
            };


            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("merchantShipmentNo", ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToString(merchantShipmentNo)); // path parameter

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/v2/orders/{merchantShipmentNo}/shippinglabel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipmentShippingLabel", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Shipment. Update an existing shipment with tracking information.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantShipmentNo">The merchant&#39;s shipment reference.</param>
        /// <param name="merchantShipmentTrackingRequest">The updated tracking information. (optional)</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse ShipmentUpdate(string merchantShipmentNo, MerchantShipmentTrackingRequest merchantShipmentTrackingRequest = default(MerchantShipmentTrackingRequest))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse> localVarResponse = ShipmentUpdateWithHttpInfo(merchantShipmentNo, merchantShipmentTrackingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Shipment. Update an existing shipment with tracking information.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantShipmentNo">The merchant&#39;s shipment reference.</param>
        /// <param name="merchantShipmentTrackingRequest">The updated tracking information. (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse> ShipmentUpdateWithHttpInfo(string merchantShipmentNo, MerchantShipmentTrackingRequest merchantShipmentTrackingRequest = default(MerchantShipmentTrackingRequest))
        {
            // verify the required parameter 'merchantShipmentNo' is set
            if (merchantShipmentNo == null)
                throw new ChannelEngine.Merchant.ApiClient.Client.ApiException(400, "Missing required parameter 'merchantShipmentNo' when calling ShipmentApi->ShipmentUpdate");

            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("merchantShipmentNo", ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToString(merchantShipmentNo)); // path parameter
            localVarRequestOptions.Data = merchantShipmentTrackingRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApiResponse>("/v2/shipments/{merchantShipmentNo}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipmentUpdate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Shipment. Update an existing shipment with tracking information.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantShipmentNo">The merchant&#39;s shipment reference.</param>
        /// <param name="merchantShipmentTrackingRequest">The updated tracking information. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> ShipmentUpdateAsync(string merchantShipmentNo, MerchantShipmentTrackingRequest merchantShipmentTrackingRequest = default(MerchantShipmentTrackingRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse> localVarResponse = await ShipmentUpdateWithHttpInfoAsync(merchantShipmentNo, merchantShipmentTrackingRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Shipment. Update an existing shipment with tracking information.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantShipmentNo">The merchant&#39;s shipment reference.</param>
        /// <param name="merchantShipmentTrackingRequest">The updated tracking information. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse>> ShipmentUpdateWithHttpInfoAsync(string merchantShipmentNo, MerchantShipmentTrackingRequest merchantShipmentTrackingRequest = default(MerchantShipmentTrackingRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'merchantShipmentNo' is set
            if (merchantShipmentNo == null)
                throw new ChannelEngine.Merchant.ApiClient.Client.ApiException(400, "Missing required parameter 'merchantShipmentNo' when calling ShipmentApi->ShipmentUpdate");


            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("merchantShipmentNo", ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToString(merchantShipmentNo)); // path parameter
            localVarRequestOptions.Data = merchantShipmentTrackingRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ApiResponse>("/v2/shipments/{merchantShipmentNo}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipmentUpdate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}

/*
 * ChannelEngine Merchant API
 *
 * ChannelEngine API for merchants
 *
 * The version of the OpenAPI document: 2.13.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ChannelEngine.Merchant.ApiClient.Client;
using ChannelEngine.Merchant.ApiClient.Model;

namespace ChannelEngine.Merchant.ApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReturnApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Acknowledge Return.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantReturnAcknowledgeRequest"> (optional)</param>
        /// <returns>ApiResponse</returns>
        ApiResponse ReturnAcknowledge(MerchantReturnAcknowledgeRequest merchantReturnAcknowledgeRequest = default(MerchantReturnAcknowledgeRequest));

        /// <summary>
        /// Acknowledge Return.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantReturnAcknowledgeRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> ReturnAcknowledgeWithHttpInfo(MerchantReturnAcknowledgeRequest merchantReturnAcknowledgeRequest = default(MerchantReturnAcknowledgeRequest));
        /// <summary>
        /// Create Return.
        /// </summary>
        /// <remarks>
        /// Mark (part of) an order as returned by the customer.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantReturnRequest"> (optional)</param>
        /// <returns>ApiResponse</returns>
        ApiResponse ReturnDeclareForMerchant(MerchantReturnRequest merchantReturnRequest = default(MerchantReturnRequest));

        /// <summary>
        /// Create Return.
        /// </summary>
        /// <remarks>
        /// Mark (part of) an order as returned by the customer.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantReturnRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> ReturnDeclareForMerchantWithHttpInfo(MerchantReturnRequest merchantReturnRequest = default(MerchantReturnRequest));
        /// <summary>
        /// Get Return.
        /// </summary>
        /// <remarks>
        /// Retrieve returns based on the supplied merchant order number. May return more than 1 result.&lt;br /&gt;This call is supposed to be used by merchants. Channels should use the &#39;GET /v2/returns/channel&#39;&lt;br /&gt;call.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderNo"></param>
        /// <returns>CollectionOfMerchantSingleOrderReturnResponse</returns>
        CollectionOfMerchantSingleOrderReturnResponse ReturnGetByMerchantOrderNo(string merchantOrderNo);

        /// <summary>
        /// Get Return.
        /// </summary>
        /// <remarks>
        /// Retrieve returns based on the supplied merchant order number. May return more than 1 result.&lt;br /&gt;This call is supposed to be used by merchants. Channels should use the &#39;GET /v2/returns/channel&#39;&lt;br /&gt;call.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderNo"></param>
        /// <returns>ApiResponse of CollectionOfMerchantSingleOrderReturnResponse</returns>
        ApiResponse<CollectionOfMerchantSingleOrderReturnResponse> ReturnGetByMerchantOrderNoWithHttpInfo(string merchantOrderNo);
        /// <summary>
        /// Get Returns.
        /// </summary>
        /// <remarks>
        /// Get all returns created by the channel. This call is supposed&lt;br /&gt;to be used by merchants. Channels should use the &#39;GET /v2/returns/channel&#39;&lt;br /&gt;call.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelIds">Filter on Channel IDs (optional)</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant. (optional)</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel. (optional)</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the order. (optional)</param>
        /// <param name="statuses">Return status(es) to filter on. (optional)</param>
        /// <param name="reasons">Return reason(s) to filter on. (optional)</param>
        /// <param name="fromDate">Filter on the creation date, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toDate">Filter on the creation date, until this date. This date is exclusive. (optional)</param>
        /// <param name="isAcknowledged">Filters based on acknowledgements (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <returns>CollectionOfMerchantReturnResponse</returns>
        CollectionOfMerchantReturnResponse ReturnGetDeclaredByChannel(List<int> channelIds = default(List<int>), List<string> merchantOrderNos = default(List<string>), List<string> channelOrderNos = default(List<string>), FulfillmentType? fulfillmentType = default(FulfillmentType?), List<ReturnStatus> statuses = default(List<ReturnStatus>), List<ReturnReason> reasons = default(List<ReturnReason>), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), bool? isAcknowledged = default(bool?), int? page = default(int?));

        /// <summary>
        /// Get Returns.
        /// </summary>
        /// <remarks>
        /// Get all returns created by the channel. This call is supposed&lt;br /&gt;to be used by merchants. Channels should use the &#39;GET /v2/returns/channel&#39;&lt;br /&gt;call.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelIds">Filter on Channel IDs (optional)</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant. (optional)</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel. (optional)</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the order. (optional)</param>
        /// <param name="statuses">Return status(es) to filter on. (optional)</param>
        /// <param name="reasons">Return reason(s) to filter on. (optional)</param>
        /// <param name="fromDate">Filter on the creation date, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toDate">Filter on the creation date, until this date. This date is exclusive. (optional)</param>
        /// <param name="isAcknowledged">Filters based on acknowledgements (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <returns>ApiResponse of CollectionOfMerchantReturnResponse</returns>
        ApiResponse<CollectionOfMerchantReturnResponse> ReturnGetDeclaredByChannelWithHttpInfo(List<int> channelIds = default(List<int>), List<string> merchantOrderNos = default(List<string>), List<string> channelOrderNos = default(List<string>), FulfillmentType? fulfillmentType = default(FulfillmentType?), List<ReturnStatus> statuses = default(List<ReturnStatus>), List<ReturnReason> reasons = default(List<ReturnReason>), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), bool? isAcknowledged = default(bool?), int? page = default(int?));
        /// <summary>
        /// Get Returns.
        /// </summary>
        /// <remarks>
        /// Get all returns created by the merchant. This call is supposed&lt;br /&gt;to be used by merchants. To get returns created by channels, the &#39;GET /v2/returns/merchant&#39; endpoint should be used.&lt;br /&gt;Channels should use the &#39;GET /v2/returns/channel&#39; call.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creatorType">Filter on the return&#39;s creator. Default is MIXED. (optional)</param>
        /// <param name="channelIds">Filter on Channel IDs (optional)</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant. (optional)</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel. (optional)</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the order. (optional)</param>
        /// <param name="statuses">Return status(es) to filter on. (optional)</param>
        /// <param name="reasons">Return reason(s) to filter on. (optional)</param>
        /// <param name="fromDate">Filter on the creation date, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toDate">Filter on the creation date, until this date. This date is exclusive. (optional)</param>
        /// <param name="isAcknowledged">Filters based on acknowledgements (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <returns>CollectionOfMerchantReturnResponse</returns>
        CollectionOfMerchantReturnResponse ReturnGetReturns(CreatorFilter? creatorType = default(CreatorFilter?), List<int> channelIds = default(List<int>), List<string> merchantOrderNos = default(List<string>), List<string> channelOrderNos = default(List<string>), FulfillmentType? fulfillmentType = default(FulfillmentType?), List<ReturnStatus> statuses = default(List<ReturnStatus>), List<ReturnReason> reasons = default(List<ReturnReason>), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), bool? isAcknowledged = default(bool?), int? page = default(int?));

        /// <summary>
        /// Get Returns.
        /// </summary>
        /// <remarks>
        /// Get all returns created by the merchant. This call is supposed&lt;br /&gt;to be used by merchants. To get returns created by channels, the &#39;GET /v2/returns/merchant&#39; endpoint should be used.&lt;br /&gt;Channels should use the &#39;GET /v2/returns/channel&#39; call.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creatorType">Filter on the return&#39;s creator. Default is MIXED. (optional)</param>
        /// <param name="channelIds">Filter on Channel IDs (optional)</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant. (optional)</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel. (optional)</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the order. (optional)</param>
        /// <param name="statuses">Return status(es) to filter on. (optional)</param>
        /// <param name="reasons">Return reason(s) to filter on. (optional)</param>
        /// <param name="fromDate">Filter on the creation date, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toDate">Filter on the creation date, until this date. This date is exclusive. (optional)</param>
        /// <param name="isAcknowledged">Filters based on acknowledgements (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <returns>ApiResponse of CollectionOfMerchantReturnResponse</returns>
        ApiResponse<CollectionOfMerchantReturnResponse> ReturnGetReturnsWithHttpInfo(CreatorFilter? creatorType = default(CreatorFilter?), List<int> channelIds = default(List<int>), List<string> merchantOrderNos = default(List<string>), List<string> channelOrderNos = default(List<string>), FulfillmentType? fulfillmentType = default(FulfillmentType?), List<ReturnStatus> statuses = default(List<ReturnStatus>), List<ReturnReason> reasons = default(List<ReturnReason>), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), bool? isAcknowledged = default(bool?), int? page = default(int?));
        /// <summary>
        /// Get Unhandled Returns.
        /// </summary>
        /// <remarks>
        /// Get all new / unhandled returns created by channels. This call is supposed&lt;br /&gt;to be used by merchants. Channels should use the &#39;GET /v2/returns/channel&#39;&lt;br /&gt;call.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelIds">Filter on Channel IDs (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <returns>CollectionOfMerchantReturnResponse</returns>
        CollectionOfMerchantReturnResponse ReturnGetUnhandled(List<int> channelIds = default(List<int>), int? page = default(int?));

        /// <summary>
        /// Get Unhandled Returns.
        /// </summary>
        /// <remarks>
        /// Get all new / unhandled returns created by channels. This call is supposed&lt;br /&gt;to be used by merchants. Channels should use the &#39;GET /v2/returns/channel&#39;&lt;br /&gt;call.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelIds">Filter on Channel IDs (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <returns>ApiResponse of CollectionOfMerchantReturnResponse</returns>
        ApiResponse<CollectionOfMerchantReturnResponse> ReturnGetUnhandledWithHttpInfo(List<int> channelIds = default(List<int>), int? page = default(int?));
        /// <summary>
        /// Mark a return as received.
        /// </summary>
        /// <remarks>
        /// Mark a return as received.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantReturnUpdateRequest"> (optional)</param>
        /// <returns>ApiResponse</returns>
        ApiResponse ReturnUpdateForMerchant(MerchantReturnUpdateRequest merchantReturnUpdateRequest = default(MerchantReturnUpdateRequest));

        /// <summary>
        /// Mark a return as received.
        /// </summary>
        /// <remarks>
        /// Mark a return as received.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantReturnUpdateRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> ReturnUpdateForMerchantWithHttpInfo(MerchantReturnUpdateRequest merchantReturnUpdateRequest = default(MerchantReturnUpdateRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReturnApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Acknowledge Return.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantReturnAcknowledgeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> ReturnAcknowledgeAsync(MerchantReturnAcknowledgeRequest merchantReturnAcknowledgeRequest = default(MerchantReturnAcknowledgeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Acknowledge Return.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantReturnAcknowledgeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ReturnAcknowledgeWithHttpInfoAsync(MerchantReturnAcknowledgeRequest merchantReturnAcknowledgeRequest = default(MerchantReturnAcknowledgeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Return.
        /// </summary>
        /// <remarks>
        /// Mark (part of) an order as returned by the customer.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantReturnRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> ReturnDeclareForMerchantAsync(MerchantReturnRequest merchantReturnRequest = default(MerchantReturnRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Return.
        /// </summary>
        /// <remarks>
        /// Mark (part of) an order as returned by the customer.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantReturnRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ReturnDeclareForMerchantWithHttpInfoAsync(MerchantReturnRequest merchantReturnRequest = default(MerchantReturnRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Return.
        /// </summary>
        /// <remarks>
        /// Retrieve returns based on the supplied merchant order number. May return more than 1 result.&lt;br /&gt;This call is supposed to be used by merchants. Channels should use the &#39;GET /v2/returns/channel&#39;&lt;br /&gt;call.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderNo"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionOfMerchantSingleOrderReturnResponse</returns>
        System.Threading.Tasks.Task<CollectionOfMerchantSingleOrderReturnResponse> ReturnGetByMerchantOrderNoAsync(string merchantOrderNo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Return.
        /// </summary>
        /// <remarks>
        /// Retrieve returns based on the supplied merchant order number. May return more than 1 result.&lt;br /&gt;This call is supposed to be used by merchants. Channels should use the &#39;GET /v2/returns/channel&#39;&lt;br /&gt;call.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderNo"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionOfMerchantSingleOrderReturnResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionOfMerchantSingleOrderReturnResponse>> ReturnGetByMerchantOrderNoWithHttpInfoAsync(string merchantOrderNo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Returns.
        /// </summary>
        /// <remarks>
        /// Get all returns created by the channel. This call is supposed&lt;br /&gt;to be used by merchants. Channels should use the &#39;GET /v2/returns/channel&#39;&lt;br /&gt;call.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelIds">Filter on Channel IDs (optional)</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant. (optional)</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel. (optional)</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the order. (optional)</param>
        /// <param name="statuses">Return status(es) to filter on. (optional)</param>
        /// <param name="reasons">Return reason(s) to filter on. (optional)</param>
        /// <param name="fromDate">Filter on the creation date, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toDate">Filter on the creation date, until this date. This date is exclusive. (optional)</param>
        /// <param name="isAcknowledged">Filters based on acknowledgements (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionOfMerchantReturnResponse</returns>
        System.Threading.Tasks.Task<CollectionOfMerchantReturnResponse> ReturnGetDeclaredByChannelAsync(List<int> channelIds = default(List<int>), List<string> merchantOrderNos = default(List<string>), List<string> channelOrderNos = default(List<string>), FulfillmentType? fulfillmentType = default(FulfillmentType?), List<ReturnStatus> statuses = default(List<ReturnStatus>), List<ReturnReason> reasons = default(List<ReturnReason>), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), bool? isAcknowledged = default(bool?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Returns.
        /// </summary>
        /// <remarks>
        /// Get all returns created by the channel. This call is supposed&lt;br /&gt;to be used by merchants. Channels should use the &#39;GET /v2/returns/channel&#39;&lt;br /&gt;call.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelIds">Filter on Channel IDs (optional)</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant. (optional)</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel. (optional)</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the order. (optional)</param>
        /// <param name="statuses">Return status(es) to filter on. (optional)</param>
        /// <param name="reasons">Return reason(s) to filter on. (optional)</param>
        /// <param name="fromDate">Filter on the creation date, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toDate">Filter on the creation date, until this date. This date is exclusive. (optional)</param>
        /// <param name="isAcknowledged">Filters based on acknowledgements (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionOfMerchantReturnResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionOfMerchantReturnResponse>> ReturnGetDeclaredByChannelWithHttpInfoAsync(List<int> channelIds = default(List<int>), List<string> merchantOrderNos = default(List<string>), List<string> channelOrderNos = default(List<string>), FulfillmentType? fulfillmentType = default(FulfillmentType?), List<ReturnStatus> statuses = default(List<ReturnStatus>), List<ReturnReason> reasons = default(List<ReturnReason>), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), bool? isAcknowledged = default(bool?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Returns.
        /// </summary>
        /// <remarks>
        /// Get all returns created by the merchant. This call is supposed&lt;br /&gt;to be used by merchants. To get returns created by channels, the &#39;GET /v2/returns/merchant&#39; endpoint should be used.&lt;br /&gt;Channels should use the &#39;GET /v2/returns/channel&#39; call.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creatorType">Filter on the return&#39;s creator. Default is MIXED. (optional)</param>
        /// <param name="channelIds">Filter on Channel IDs (optional)</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant. (optional)</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel. (optional)</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the order. (optional)</param>
        /// <param name="statuses">Return status(es) to filter on. (optional)</param>
        /// <param name="reasons">Return reason(s) to filter on. (optional)</param>
        /// <param name="fromDate">Filter on the creation date, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toDate">Filter on the creation date, until this date. This date is exclusive. (optional)</param>
        /// <param name="isAcknowledged">Filters based on acknowledgements (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionOfMerchantReturnResponse</returns>
        System.Threading.Tasks.Task<CollectionOfMerchantReturnResponse> ReturnGetReturnsAsync(CreatorFilter? creatorType = default(CreatorFilter?), List<int> channelIds = default(List<int>), List<string> merchantOrderNos = default(List<string>), List<string> channelOrderNos = default(List<string>), FulfillmentType? fulfillmentType = default(FulfillmentType?), List<ReturnStatus> statuses = default(List<ReturnStatus>), List<ReturnReason> reasons = default(List<ReturnReason>), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), bool? isAcknowledged = default(bool?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Returns.
        /// </summary>
        /// <remarks>
        /// Get all returns created by the merchant. This call is supposed&lt;br /&gt;to be used by merchants. To get returns created by channels, the &#39;GET /v2/returns/merchant&#39; endpoint should be used.&lt;br /&gt;Channels should use the &#39;GET /v2/returns/channel&#39; call.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creatorType">Filter on the return&#39;s creator. Default is MIXED. (optional)</param>
        /// <param name="channelIds">Filter on Channel IDs (optional)</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant. (optional)</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel. (optional)</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the order. (optional)</param>
        /// <param name="statuses">Return status(es) to filter on. (optional)</param>
        /// <param name="reasons">Return reason(s) to filter on. (optional)</param>
        /// <param name="fromDate">Filter on the creation date, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toDate">Filter on the creation date, until this date. This date is exclusive. (optional)</param>
        /// <param name="isAcknowledged">Filters based on acknowledgements (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionOfMerchantReturnResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionOfMerchantReturnResponse>> ReturnGetReturnsWithHttpInfoAsync(CreatorFilter? creatorType = default(CreatorFilter?), List<int> channelIds = default(List<int>), List<string> merchantOrderNos = default(List<string>), List<string> channelOrderNos = default(List<string>), FulfillmentType? fulfillmentType = default(FulfillmentType?), List<ReturnStatus> statuses = default(List<ReturnStatus>), List<ReturnReason> reasons = default(List<ReturnReason>), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), bool? isAcknowledged = default(bool?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Unhandled Returns.
        /// </summary>
        /// <remarks>
        /// Get all new / unhandled returns created by channels. This call is supposed&lt;br /&gt;to be used by merchants. Channels should use the &#39;GET /v2/returns/channel&#39;&lt;br /&gt;call.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelIds">Filter on Channel IDs (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionOfMerchantReturnResponse</returns>
        System.Threading.Tasks.Task<CollectionOfMerchantReturnResponse> ReturnGetUnhandledAsync(List<int> channelIds = default(List<int>), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Unhandled Returns.
        /// </summary>
        /// <remarks>
        /// Get all new / unhandled returns created by channels. This call is supposed&lt;br /&gt;to be used by merchants. Channels should use the &#39;GET /v2/returns/channel&#39;&lt;br /&gt;call.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelIds">Filter on Channel IDs (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionOfMerchantReturnResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionOfMerchantReturnResponse>> ReturnGetUnhandledWithHttpInfoAsync(List<int> channelIds = default(List<int>), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Mark a return as received.
        /// </summary>
        /// <remarks>
        /// Mark a return as received.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantReturnUpdateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> ReturnUpdateForMerchantAsync(MerchantReturnUpdateRequest merchantReturnUpdateRequest = default(MerchantReturnUpdateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Mark a return as received.
        /// </summary>
        /// <remarks>
        /// Mark a return as received.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantReturnUpdateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ReturnUpdateForMerchantWithHttpInfoAsync(MerchantReturnUpdateRequest merchantReturnUpdateRequest = default(MerchantReturnUpdateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReturnApi : IReturnApiSync, IReturnApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReturnApi : IReturnApi
    {
        private ChannelEngine.Merchant.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReturnApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReturnApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReturnApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReturnApi(string basePath)
        {
            this.Configuration = ChannelEngine.Merchant.ApiClient.Client.Configuration.MergeConfigurations(
                ChannelEngine.Merchant.ApiClient.Client.GlobalConfiguration.Instance,
                new ChannelEngine.Merchant.ApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ChannelEngine.Merchant.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ChannelEngine.Merchant.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ChannelEngine.Merchant.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReturnApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReturnApi(ChannelEngine.Merchant.ApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ChannelEngine.Merchant.ApiClient.Client.Configuration.MergeConfigurations(
                ChannelEngine.Merchant.ApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ChannelEngine.Merchant.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ChannelEngine.Merchant.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ChannelEngine.Merchant.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReturnApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ReturnApi(ChannelEngine.Merchant.ApiClient.Client.ISynchronousClient client, ChannelEngine.Merchant.ApiClient.Client.IAsynchronousClient asyncClient, ChannelEngine.Merchant.ApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ChannelEngine.Merchant.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ChannelEngine.Merchant.ApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ChannelEngine.Merchant.ApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ChannelEngine.Merchant.ApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ChannelEngine.Merchant.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Acknowledge Return. 
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantReturnAcknowledgeRequest"> (optional)</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse ReturnAcknowledge(MerchantReturnAcknowledgeRequest merchantReturnAcknowledgeRequest = default(MerchantReturnAcknowledgeRequest))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse> localVarResponse = ReturnAcknowledgeWithHttpInfo(merchantReturnAcknowledgeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Acknowledge Return. 
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantReturnAcknowledgeRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse> ReturnAcknowledgeWithHttpInfo(MerchantReturnAcknowledgeRequest merchantReturnAcknowledgeRequest = default(MerchantReturnAcknowledgeRequest))
        {
            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = merchantReturnAcknowledgeRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/v2/returns/merchant/acknowledge", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReturnAcknowledge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Acknowledge Return. 
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantReturnAcknowledgeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> ReturnAcknowledgeAsync(MerchantReturnAcknowledgeRequest merchantReturnAcknowledgeRequest = default(MerchantReturnAcknowledgeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse> localVarResponse = await ReturnAcknowledgeWithHttpInfoAsync(merchantReturnAcknowledgeRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Acknowledge Return. 
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantReturnAcknowledgeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse>> ReturnAcknowledgeWithHttpInfoAsync(MerchantReturnAcknowledgeRequest merchantReturnAcknowledgeRequest = default(MerchantReturnAcknowledgeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = merchantReturnAcknowledgeRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/v2/returns/merchant/acknowledge", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReturnAcknowledge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Return. Mark (part of) an order as returned by the customer.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantReturnRequest"> (optional)</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse ReturnDeclareForMerchant(MerchantReturnRequest merchantReturnRequest = default(MerchantReturnRequest))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse> localVarResponse = ReturnDeclareForMerchantWithHttpInfo(merchantReturnRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Return. Mark (part of) an order as returned by the customer.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantReturnRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse> ReturnDeclareForMerchantWithHttpInfo(MerchantReturnRequest merchantReturnRequest = default(MerchantReturnRequest))
        {
            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = merchantReturnRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/v2/returns/merchant", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReturnDeclareForMerchant", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Return. Mark (part of) an order as returned by the customer.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantReturnRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> ReturnDeclareForMerchantAsync(MerchantReturnRequest merchantReturnRequest = default(MerchantReturnRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse> localVarResponse = await ReturnDeclareForMerchantWithHttpInfoAsync(merchantReturnRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Return. Mark (part of) an order as returned by the customer.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantReturnRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse>> ReturnDeclareForMerchantWithHttpInfoAsync(MerchantReturnRequest merchantReturnRequest = default(MerchantReturnRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = merchantReturnRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/v2/returns/merchant", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReturnDeclareForMerchant", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Return. Retrieve returns based on the supplied merchant order number. May return more than 1 result.&lt;br /&gt;This call is supposed to be used by merchants. Channels should use the &#39;GET /v2/returns/channel&#39;&lt;br /&gt;call.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderNo"></param>
        /// <returns>CollectionOfMerchantSingleOrderReturnResponse</returns>
        public CollectionOfMerchantSingleOrderReturnResponse ReturnGetByMerchantOrderNo(string merchantOrderNo)
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantSingleOrderReturnResponse> localVarResponse = ReturnGetByMerchantOrderNoWithHttpInfo(merchantOrderNo);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Return. Retrieve returns based on the supplied merchant order number. May return more than 1 result.&lt;br /&gt;This call is supposed to be used by merchants. Channels should use the &#39;GET /v2/returns/channel&#39;&lt;br /&gt;call.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderNo"></param>
        /// <returns>ApiResponse of CollectionOfMerchantSingleOrderReturnResponse</returns>
        public ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantSingleOrderReturnResponse> ReturnGetByMerchantOrderNoWithHttpInfo(string merchantOrderNo)
        {
            // verify the required parameter 'merchantOrderNo' is set
            if (merchantOrderNo == null)
                throw new ChannelEngine.Merchant.ApiClient.Client.ApiException(400, "Missing required parameter 'merchantOrderNo' when calling ReturnApi->ReturnGetByMerchantOrderNo");

            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("merchantOrderNo", ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToString(merchantOrderNo)); // path parameter

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionOfMerchantSingleOrderReturnResponse>("/v2/returns/merchant/{merchantOrderNo}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReturnGetByMerchantOrderNo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Return. Retrieve returns based on the supplied merchant order number. May return more than 1 result.&lt;br /&gt;This call is supposed to be used by merchants. Channels should use the &#39;GET /v2/returns/channel&#39;&lt;br /&gt;call.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderNo"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionOfMerchantSingleOrderReturnResponse</returns>
        public async System.Threading.Tasks.Task<CollectionOfMerchantSingleOrderReturnResponse> ReturnGetByMerchantOrderNoAsync(string merchantOrderNo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantSingleOrderReturnResponse> localVarResponse = await ReturnGetByMerchantOrderNoWithHttpInfoAsync(merchantOrderNo, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Return. Retrieve returns based on the supplied merchant order number. May return more than 1 result.&lt;br /&gt;This call is supposed to be used by merchants. Channels should use the &#39;GET /v2/returns/channel&#39;&lt;br /&gt;call.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantOrderNo"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionOfMerchantSingleOrderReturnResponse)</returns>
        public async System.Threading.Tasks.Task<ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantSingleOrderReturnResponse>> ReturnGetByMerchantOrderNoWithHttpInfoAsync(string merchantOrderNo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'merchantOrderNo' is set
            if (merchantOrderNo == null)
                throw new ChannelEngine.Merchant.ApiClient.Client.ApiException(400, "Missing required parameter 'merchantOrderNo' when calling ReturnApi->ReturnGetByMerchantOrderNo");


            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("merchantOrderNo", ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToString(merchantOrderNo)); // path parameter

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionOfMerchantSingleOrderReturnResponse>("/v2/returns/merchant/{merchantOrderNo}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReturnGetByMerchantOrderNo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Returns. Get all returns created by the channel. This call is supposed&lt;br /&gt;to be used by merchants. Channels should use the &#39;GET /v2/returns/channel&#39;&lt;br /&gt;call.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelIds">Filter on Channel IDs (optional)</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant. (optional)</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel. (optional)</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the order. (optional)</param>
        /// <param name="statuses">Return status(es) to filter on. (optional)</param>
        /// <param name="reasons">Return reason(s) to filter on. (optional)</param>
        /// <param name="fromDate">Filter on the creation date, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toDate">Filter on the creation date, until this date. This date is exclusive. (optional)</param>
        /// <param name="isAcknowledged">Filters based on acknowledgements (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <returns>CollectionOfMerchantReturnResponse</returns>
        public CollectionOfMerchantReturnResponse ReturnGetDeclaredByChannel(List<int> channelIds = default(List<int>), List<string> merchantOrderNos = default(List<string>), List<string> channelOrderNos = default(List<string>), FulfillmentType? fulfillmentType = default(FulfillmentType?), List<ReturnStatus> statuses = default(List<ReturnStatus>), List<ReturnReason> reasons = default(List<ReturnReason>), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), bool? isAcknowledged = default(bool?), int? page = default(int?))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantReturnResponse> localVarResponse = ReturnGetDeclaredByChannelWithHttpInfo(channelIds, merchantOrderNos, channelOrderNos, fulfillmentType, statuses, reasons, fromDate, toDate, isAcknowledged, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Returns. Get all returns created by the channel. This call is supposed&lt;br /&gt;to be used by merchants. Channels should use the &#39;GET /v2/returns/channel&#39;&lt;br /&gt;call.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelIds">Filter on Channel IDs (optional)</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant. (optional)</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel. (optional)</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the order. (optional)</param>
        /// <param name="statuses">Return status(es) to filter on. (optional)</param>
        /// <param name="reasons">Return reason(s) to filter on. (optional)</param>
        /// <param name="fromDate">Filter on the creation date, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toDate">Filter on the creation date, until this date. This date is exclusive. (optional)</param>
        /// <param name="isAcknowledged">Filters based on acknowledgements (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <returns>ApiResponse of CollectionOfMerchantReturnResponse</returns>
        public ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantReturnResponse> ReturnGetDeclaredByChannelWithHttpInfo(List<int> channelIds = default(List<int>), List<string> merchantOrderNos = default(List<string>), List<string> channelOrderNos = default(List<string>), FulfillmentType? fulfillmentType = default(FulfillmentType?), List<ReturnStatus> statuses = default(List<ReturnStatus>), List<ReturnReason> reasons = default(List<ReturnReason>), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), bool? isAcknowledged = default(bool?), int? page = default(int?))
        {
            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (channelIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "channelIds", channelIds));
            }
            if (merchantOrderNos != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "merchantOrderNos", merchantOrderNos));
            }
            if (channelOrderNos != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "channelOrderNos", channelOrderNos));
            }
            if (fulfillmentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "fulfillmentType", fulfillmentType));
            }
            if (statuses != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "statuses", statuses));
            }
            if (reasons != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "reasons", reasons));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate));
            }
            if (isAcknowledged != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "isAcknowledged", isAcknowledged));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionOfMerchantReturnResponse>("/v2/returns/merchant", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReturnGetDeclaredByChannel", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Returns. Get all returns created by the channel. This call is supposed&lt;br /&gt;to be used by merchants. Channels should use the &#39;GET /v2/returns/channel&#39;&lt;br /&gt;call.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelIds">Filter on Channel IDs (optional)</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant. (optional)</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel. (optional)</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the order. (optional)</param>
        /// <param name="statuses">Return status(es) to filter on. (optional)</param>
        /// <param name="reasons">Return reason(s) to filter on. (optional)</param>
        /// <param name="fromDate">Filter on the creation date, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toDate">Filter on the creation date, until this date. This date is exclusive. (optional)</param>
        /// <param name="isAcknowledged">Filters based on acknowledgements (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionOfMerchantReturnResponse</returns>
        public async System.Threading.Tasks.Task<CollectionOfMerchantReturnResponse> ReturnGetDeclaredByChannelAsync(List<int> channelIds = default(List<int>), List<string> merchantOrderNos = default(List<string>), List<string> channelOrderNos = default(List<string>), FulfillmentType? fulfillmentType = default(FulfillmentType?), List<ReturnStatus> statuses = default(List<ReturnStatus>), List<ReturnReason> reasons = default(List<ReturnReason>), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), bool? isAcknowledged = default(bool?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantReturnResponse> localVarResponse = await ReturnGetDeclaredByChannelWithHttpInfoAsync(channelIds, merchantOrderNos, channelOrderNos, fulfillmentType, statuses, reasons, fromDate, toDate, isAcknowledged, page, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Returns. Get all returns created by the channel. This call is supposed&lt;br /&gt;to be used by merchants. Channels should use the &#39;GET /v2/returns/channel&#39;&lt;br /&gt;call.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelIds">Filter on Channel IDs (optional)</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant. (optional)</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel. (optional)</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the order. (optional)</param>
        /// <param name="statuses">Return status(es) to filter on. (optional)</param>
        /// <param name="reasons">Return reason(s) to filter on. (optional)</param>
        /// <param name="fromDate">Filter on the creation date, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toDate">Filter on the creation date, until this date. This date is exclusive. (optional)</param>
        /// <param name="isAcknowledged">Filters based on acknowledgements (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionOfMerchantReturnResponse)</returns>
        public async System.Threading.Tasks.Task<ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantReturnResponse>> ReturnGetDeclaredByChannelWithHttpInfoAsync(List<int> channelIds = default(List<int>), List<string> merchantOrderNos = default(List<string>), List<string> channelOrderNos = default(List<string>), FulfillmentType? fulfillmentType = default(FulfillmentType?), List<ReturnStatus> statuses = default(List<ReturnStatus>), List<ReturnReason> reasons = default(List<ReturnReason>), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), bool? isAcknowledged = default(bool?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (channelIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "channelIds", channelIds));
            }
            if (merchantOrderNos != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "merchantOrderNos", merchantOrderNos));
            }
            if (channelOrderNos != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "channelOrderNos", channelOrderNos));
            }
            if (fulfillmentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "fulfillmentType", fulfillmentType));
            }
            if (statuses != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "statuses", statuses));
            }
            if (reasons != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "reasons", reasons));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate));
            }
            if (isAcknowledged != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "isAcknowledged", isAcknowledged));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionOfMerchantReturnResponse>("/v2/returns/merchant", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReturnGetDeclaredByChannel", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Returns. Get all returns created by the merchant. This call is supposed&lt;br /&gt;to be used by merchants. To get returns created by channels, the &#39;GET /v2/returns/merchant&#39; endpoint should be used.&lt;br /&gt;Channels should use the &#39;GET /v2/returns/channel&#39; call.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creatorType">Filter on the return&#39;s creator. Default is MIXED. (optional)</param>
        /// <param name="channelIds">Filter on Channel IDs (optional)</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant. (optional)</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel. (optional)</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the order. (optional)</param>
        /// <param name="statuses">Return status(es) to filter on. (optional)</param>
        /// <param name="reasons">Return reason(s) to filter on. (optional)</param>
        /// <param name="fromDate">Filter on the creation date, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toDate">Filter on the creation date, until this date. This date is exclusive. (optional)</param>
        /// <param name="isAcknowledged">Filters based on acknowledgements (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <returns>CollectionOfMerchantReturnResponse</returns>
        public CollectionOfMerchantReturnResponse ReturnGetReturns(CreatorFilter? creatorType = default(CreatorFilter?), List<int> channelIds = default(List<int>), List<string> merchantOrderNos = default(List<string>), List<string> channelOrderNos = default(List<string>), FulfillmentType? fulfillmentType = default(FulfillmentType?), List<ReturnStatus> statuses = default(List<ReturnStatus>), List<ReturnReason> reasons = default(List<ReturnReason>), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), bool? isAcknowledged = default(bool?), int? page = default(int?))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantReturnResponse> localVarResponse = ReturnGetReturnsWithHttpInfo(creatorType, channelIds, merchantOrderNos, channelOrderNos, fulfillmentType, statuses, reasons, fromDate, toDate, isAcknowledged, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Returns. Get all returns created by the merchant. This call is supposed&lt;br /&gt;to be used by merchants. To get returns created by channels, the &#39;GET /v2/returns/merchant&#39; endpoint should be used.&lt;br /&gt;Channels should use the &#39;GET /v2/returns/channel&#39; call.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creatorType">Filter on the return&#39;s creator. Default is MIXED. (optional)</param>
        /// <param name="channelIds">Filter on Channel IDs (optional)</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant. (optional)</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel. (optional)</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the order. (optional)</param>
        /// <param name="statuses">Return status(es) to filter on. (optional)</param>
        /// <param name="reasons">Return reason(s) to filter on. (optional)</param>
        /// <param name="fromDate">Filter on the creation date, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toDate">Filter on the creation date, until this date. This date is exclusive. (optional)</param>
        /// <param name="isAcknowledged">Filters based on acknowledgements (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <returns>ApiResponse of CollectionOfMerchantReturnResponse</returns>
        public ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantReturnResponse> ReturnGetReturnsWithHttpInfo(CreatorFilter? creatorType = default(CreatorFilter?), List<int> channelIds = default(List<int>), List<string> merchantOrderNos = default(List<string>), List<string> channelOrderNos = default(List<string>), FulfillmentType? fulfillmentType = default(FulfillmentType?), List<ReturnStatus> statuses = default(List<ReturnStatus>), List<ReturnReason> reasons = default(List<ReturnReason>), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), bool? isAcknowledged = default(bool?), int? page = default(int?))
        {
            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (creatorType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "creatorType", creatorType));
            }
            if (channelIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "channelIds", channelIds));
            }
            if (merchantOrderNos != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "merchantOrderNos", merchantOrderNos));
            }
            if (channelOrderNos != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "channelOrderNos", channelOrderNos));
            }
            if (fulfillmentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "fulfillmentType", fulfillmentType));
            }
            if (statuses != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "statuses", statuses));
            }
            if (reasons != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "reasons", reasons));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate));
            }
            if (isAcknowledged != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "isAcknowledged", isAcknowledged));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionOfMerchantReturnResponse>("/v2/returns", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReturnGetReturns", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Returns. Get all returns created by the merchant. This call is supposed&lt;br /&gt;to be used by merchants. To get returns created by channels, the &#39;GET /v2/returns/merchant&#39; endpoint should be used.&lt;br /&gt;Channels should use the &#39;GET /v2/returns/channel&#39; call.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creatorType">Filter on the return&#39;s creator. Default is MIXED. (optional)</param>
        /// <param name="channelIds">Filter on Channel IDs (optional)</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant. (optional)</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel. (optional)</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the order. (optional)</param>
        /// <param name="statuses">Return status(es) to filter on. (optional)</param>
        /// <param name="reasons">Return reason(s) to filter on. (optional)</param>
        /// <param name="fromDate">Filter on the creation date, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toDate">Filter on the creation date, until this date. This date is exclusive. (optional)</param>
        /// <param name="isAcknowledged">Filters based on acknowledgements (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionOfMerchantReturnResponse</returns>
        public async System.Threading.Tasks.Task<CollectionOfMerchantReturnResponse> ReturnGetReturnsAsync(CreatorFilter? creatorType = default(CreatorFilter?), List<int> channelIds = default(List<int>), List<string> merchantOrderNos = default(List<string>), List<string> channelOrderNos = default(List<string>), FulfillmentType? fulfillmentType = default(FulfillmentType?), List<ReturnStatus> statuses = default(List<ReturnStatus>), List<ReturnReason> reasons = default(List<ReturnReason>), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), bool? isAcknowledged = default(bool?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantReturnResponse> localVarResponse = await ReturnGetReturnsWithHttpInfoAsync(creatorType, channelIds, merchantOrderNos, channelOrderNos, fulfillmentType, statuses, reasons, fromDate, toDate, isAcknowledged, page, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Returns. Get all returns created by the merchant. This call is supposed&lt;br /&gt;to be used by merchants. To get returns created by channels, the &#39;GET /v2/returns/merchant&#39; endpoint should be used.&lt;br /&gt;Channels should use the &#39;GET /v2/returns/channel&#39; call.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creatorType">Filter on the return&#39;s creator. Default is MIXED. (optional)</param>
        /// <param name="channelIds">Filter on Channel IDs (optional)</param>
        /// <param name="merchantOrderNos">Filter on unique order reference used by the merchant. (optional)</param>
        /// <param name="channelOrderNos">Filter on unique order reference used by the channel. (optional)</param>
        /// <param name="fulfillmentType">Filter on the fulfillment type of the order. (optional)</param>
        /// <param name="statuses">Return status(es) to filter on. (optional)</param>
        /// <param name="reasons">Return reason(s) to filter on. (optional)</param>
        /// <param name="fromDate">Filter on the creation date, starting from this date. This date is inclusive. (optional)</param>
        /// <param name="toDate">Filter on the creation date, until this date. This date is exclusive. (optional)</param>
        /// <param name="isAcknowledged">Filters based on acknowledgements (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionOfMerchantReturnResponse)</returns>
        public async System.Threading.Tasks.Task<ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantReturnResponse>> ReturnGetReturnsWithHttpInfoAsync(CreatorFilter? creatorType = default(CreatorFilter?), List<int> channelIds = default(List<int>), List<string> merchantOrderNos = default(List<string>), List<string> channelOrderNos = default(List<string>), FulfillmentType? fulfillmentType = default(FulfillmentType?), List<ReturnStatus> statuses = default(List<ReturnStatus>), List<ReturnReason> reasons = default(List<ReturnReason>), DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), bool? isAcknowledged = default(bool?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (creatorType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "creatorType", creatorType));
            }
            if (channelIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "channelIds", channelIds));
            }
            if (merchantOrderNos != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "merchantOrderNos", merchantOrderNos));
            }
            if (channelOrderNos != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "channelOrderNos", channelOrderNos));
            }
            if (fulfillmentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "fulfillmentType", fulfillmentType));
            }
            if (statuses != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "statuses", statuses));
            }
            if (reasons != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "reasons", reasons));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate));
            }
            if (isAcknowledged != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "isAcknowledged", isAcknowledged));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionOfMerchantReturnResponse>("/v2/returns", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReturnGetReturns", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Unhandled Returns. Get all new / unhandled returns created by channels. This call is supposed&lt;br /&gt;to be used by merchants. Channels should use the &#39;GET /v2/returns/channel&#39;&lt;br /&gt;call.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelIds">Filter on Channel IDs (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <returns>CollectionOfMerchantReturnResponse</returns>
        public CollectionOfMerchantReturnResponse ReturnGetUnhandled(List<int> channelIds = default(List<int>), int? page = default(int?))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantReturnResponse> localVarResponse = ReturnGetUnhandledWithHttpInfo(channelIds, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Unhandled Returns. Get all new / unhandled returns created by channels. This call is supposed&lt;br /&gt;to be used by merchants. Channels should use the &#39;GET /v2/returns/channel&#39;&lt;br /&gt;call.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelIds">Filter on Channel IDs (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <returns>ApiResponse of CollectionOfMerchantReturnResponse</returns>
        public ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantReturnResponse> ReturnGetUnhandledWithHttpInfo(List<int> channelIds = default(List<int>), int? page = default(int?))
        {
            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (channelIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "channelIds", channelIds));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionOfMerchantReturnResponse>("/v2/returns/merchant/new", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReturnGetUnhandled", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Unhandled Returns. Get all new / unhandled returns created by channels. This call is supposed&lt;br /&gt;to be used by merchants. Channels should use the &#39;GET /v2/returns/channel&#39;&lt;br /&gt;call.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelIds">Filter on Channel IDs (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionOfMerchantReturnResponse</returns>
        public async System.Threading.Tasks.Task<CollectionOfMerchantReturnResponse> ReturnGetUnhandledAsync(List<int> channelIds = default(List<int>), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantReturnResponse> localVarResponse = await ReturnGetUnhandledWithHttpInfoAsync(channelIds, page, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Unhandled Returns. Get all new / unhandled returns created by channels. This call is supposed&lt;br /&gt;to be used by merchants. Channels should use the &#39;GET /v2/returns/channel&#39;&lt;br /&gt;call.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelIds">Filter on Channel IDs (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionOfMerchantReturnResponse)</returns>
        public async System.Threading.Tasks.Task<ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantReturnResponse>> ReturnGetUnhandledWithHttpInfoAsync(List<int> channelIds = default(List<int>), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (channelIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "channelIds", channelIds));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionOfMerchantReturnResponse>("/v2/returns/merchant/new", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReturnGetUnhandled", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mark a return as received. Mark a return as received.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantReturnUpdateRequest"> (optional)</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse ReturnUpdateForMerchant(MerchantReturnUpdateRequest merchantReturnUpdateRequest = default(MerchantReturnUpdateRequest))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse> localVarResponse = ReturnUpdateForMerchantWithHttpInfo(merchantReturnUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Mark a return as received. Mark a return as received.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantReturnUpdateRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse> ReturnUpdateForMerchantWithHttpInfo(MerchantReturnUpdateRequest merchantReturnUpdateRequest = default(MerchantReturnUpdateRequest))
        {
            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = merchantReturnUpdateRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApiResponse>("/v2/returns", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReturnUpdateForMerchant", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mark a return as received. Mark a return as received.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantReturnUpdateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> ReturnUpdateForMerchantAsync(MerchantReturnUpdateRequest merchantReturnUpdateRequest = default(MerchantReturnUpdateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse> localVarResponse = await ReturnUpdateForMerchantWithHttpInfoAsync(merchantReturnUpdateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Mark a return as received. Mark a return as received.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantReturnUpdateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse>> ReturnUpdateForMerchantWithHttpInfoAsync(MerchantReturnUpdateRequest merchantReturnUpdateRequest = default(MerchantReturnUpdateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = merchantReturnUpdateRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ApiResponse>("/v2/returns", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReturnUpdateForMerchant", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}

/*
 * ChannelEngine Merchant API
 *
 * ChannelEngine API for merchants
 *
 * The version of the OpenAPI document: 2.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ChannelEngine.Merchant.ApiClient.Client;
using ChannelEngine.Merchant.ApiClient.Model;

namespace ChannelEngine.Merchant.ApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete multiple Products.
        /// </summary>
        /// <remarks>
        /// Delete the products based on the merchant references.&lt;br /&gt;Note that we do not really delete products, as the products&lt;br /&gt;might still be referenced by orders. Therefore, the references&lt;br /&gt;used for these products cannot be reused. We do however deactivate the products&lt;br /&gt;which means that they will not be sent to channels.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">The list of MerchantProductNo of the products you wish to delete.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse ProductBulkDelete(List<string> requestBody);

        /// <summary>
        /// Delete multiple Products.
        /// </summary>
        /// <remarks>
        /// Delete the products based on the merchant references.&lt;br /&gt;Note that we do not really delete products, as the products&lt;br /&gt;might still be referenced by orders. Therefore, the references&lt;br /&gt;used for these products cannot be reused. We do however deactivate the products&lt;br /&gt;which means that they will not be sent to channels.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">The list of MerchantProductNo of the products you wish to delete.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> ProductBulkDeleteWithHttpInfo(List<string> requestBody);
        /// <summary>
        /// Bulk Patch Products
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to update multiple fields on a multiple products.&lt;br /&gt;Products sent in a request can only be updated for the fields listed in object &#39;PropertiesToUpdate&#39;. &lt;br /&gt;In other words, you specify which products you want to update and which fields should be updated for all products.&lt;br /&gt;&lt;br /&gt;Sample request:&lt;br /&gt;&lt;br /&gt; PATCH /v2/products&lt;br /&gt; {&lt;br /&gt; \&quot;PropertiesToUpdate\&quot;: [&lt;br /&gt; \&quot;name\&quot;,&lt;br /&gt; \&quot;description\&quot;&lt;br /&gt; ],&lt;br /&gt; \&quot;MerchantProductRequestModels\&quot;: [&lt;br /&gt; {&lt;br /&gt; \&quot;MerchantProductNo\&quot;: \&quot;testMerchantProductNo\&quot;,&lt;br /&gt; \&quot;Name\&quot;: \&quot;testName\&quot;,&lt;br /&gt; \&quot;Description\&quot;: \&quot;testDescription\&quot;,&lt;br /&gt; },&lt;br /&gt; {&lt;br /&gt; \&quot;MerchantProductNo\&quot;: \&quot;testMerchantProductNo2\&quot;,&lt;br /&gt; \&quot;Name\&quot;: \&quot;testName3\&quot;,&lt;br /&gt; \&quot;Description\&quot;: \&quot;testDescription1\&quot;,&lt;br /&gt; }&lt;br /&gt; ]&lt;br /&gt; }
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patchMerchantProductDto">1) PropertiesToUpdate: Fields to update&lt;br /&gt;2) MerchantProductRequestModels: Products to be updated (optional)</param>
        /// <returns>SingleOfProductCreationResult</returns>
        SingleOfProductCreationResult ProductBulkPatch(PatchMerchantProductDto patchMerchantProductDto = default(PatchMerchantProductDto));

        /// <summary>
        /// Bulk Patch Products
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to update multiple fields on a multiple products.&lt;br /&gt;Products sent in a request can only be updated for the fields listed in object &#39;PropertiesToUpdate&#39;. &lt;br /&gt;In other words, you specify which products you want to update and which fields should be updated for all products.&lt;br /&gt;&lt;br /&gt;Sample request:&lt;br /&gt;&lt;br /&gt; PATCH /v2/products&lt;br /&gt; {&lt;br /&gt; \&quot;PropertiesToUpdate\&quot;: [&lt;br /&gt; \&quot;name\&quot;,&lt;br /&gt; \&quot;description\&quot;&lt;br /&gt; ],&lt;br /&gt; \&quot;MerchantProductRequestModels\&quot;: [&lt;br /&gt; {&lt;br /&gt; \&quot;MerchantProductNo\&quot;: \&quot;testMerchantProductNo\&quot;,&lt;br /&gt; \&quot;Name\&quot;: \&quot;testName\&quot;,&lt;br /&gt; \&quot;Description\&quot;: \&quot;testDescription\&quot;,&lt;br /&gt; },&lt;br /&gt; {&lt;br /&gt; \&quot;MerchantProductNo\&quot;: \&quot;testMerchantProductNo2\&quot;,&lt;br /&gt; \&quot;Name\&quot;: \&quot;testName3\&quot;,&lt;br /&gt; \&quot;Description\&quot;: \&quot;testDescription1\&quot;,&lt;br /&gt; }&lt;br /&gt; ]&lt;br /&gt; }
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patchMerchantProductDto">1) PropertiesToUpdate: Fields to update&lt;br /&gt;2) MerchantProductRequestModels: Products to be updated (optional)</param>
        /// <returns>ApiResponse of SingleOfProductCreationResult</returns>
        ApiResponse<SingleOfProductCreationResult> ProductBulkPatchWithHttpInfo(PatchMerchantProductDto patchMerchantProductDto = default(PatchMerchantProductDto));
        /// <summary>
        /// Upsert Products.
        /// </summary>
        /// <remarks>
        /// Upsert (update or create) products. The parent serves as the &#39;base&#39; product of the children.&lt;br /&gt;For example, the children could be different sizes or colors of the parent product.&lt;br /&gt;For channels where every size and color are different products this does not make any difference&lt;br /&gt;(the children will just be sent separately, while ignoring the parent).&lt;br /&gt;But there are channels where the parent and the children need to be sent together, for example&lt;br /&gt;when there is one product with a list of sizes. In this case all the product information is retrieved&lt;br /&gt;from the parent product while the size list is generated from the children.&lt;br /&gt; &lt;br /&gt;Note that the parent itself is a &#39;blueprint&#39; of the child products and we do our best to make sure it&lt;br /&gt;does not end up on the marketplaces itself. Only the children can be purchased.&lt;br /&gt; &lt;br /&gt;It&#39;s not possible to nest parent and children more than one level (A parent can have many children,&lt;br /&gt;but any child cannot itself also have children).&lt;br /&gt; &lt;br /&gt;The supplied MerchantProductNo needs to be unique.&lt;br /&gt; &lt;br /&gt;When \&quot;ignoreStock\&quot; query string parameter is set to \&quot;true\&quot;, stock will not be updated
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantProductRequest"></param>
        /// <param name="ignoreStock"> (optional, default to false)</param>
        /// <returns>SingleOfProductCreationResult</returns>
        SingleOfProductCreationResult ProductCreate(List<MerchantProductRequest> merchantProductRequest, bool? ignoreStock = default(bool?));

        /// <summary>
        /// Upsert Products.
        /// </summary>
        /// <remarks>
        /// Upsert (update or create) products. The parent serves as the &#39;base&#39; product of the children.&lt;br /&gt;For example, the children could be different sizes or colors of the parent product.&lt;br /&gt;For channels where every size and color are different products this does not make any difference&lt;br /&gt;(the children will just be sent separately, while ignoring the parent).&lt;br /&gt;But there are channels where the parent and the children need to be sent together, for example&lt;br /&gt;when there is one product with a list of sizes. In this case all the product information is retrieved&lt;br /&gt;from the parent product while the size list is generated from the children.&lt;br /&gt; &lt;br /&gt;Note that the parent itself is a &#39;blueprint&#39; of the child products and we do our best to make sure it&lt;br /&gt;does not end up on the marketplaces itself. Only the children can be purchased.&lt;br /&gt; &lt;br /&gt;It&#39;s not possible to nest parent and children more than one level (A parent can have many children,&lt;br /&gt;but any child cannot itself also have children).&lt;br /&gt; &lt;br /&gt;The supplied MerchantProductNo needs to be unique.&lt;br /&gt; &lt;br /&gt;When \&quot;ignoreStock\&quot; query string parameter is set to \&quot;true\&quot;, stock will not be updated
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantProductRequest"></param>
        /// <param name="ignoreStock"> (optional, default to false)</param>
        /// <returns>ApiResponse of SingleOfProductCreationResult</returns>
        ApiResponse<SingleOfProductCreationResult> ProductCreateWithHttpInfo(List<MerchantProductRequest> merchantProductRequest, bool? ignoreStock = default(bool?));
        /// <summary>
        /// Delete Product.
        /// </summary>
        /// <remarks>
        /// Delete a product based on the merchant reference.&lt;br /&gt;Note that we do not really delete a product, as the product&lt;br /&gt;might still be referenced by orders etc. Therefore, the references&lt;br /&gt;used for this product cannot be reused. We do however deactivate the product&lt;br /&gt;which means that it will not be sent to channels.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantProductNo">The MerchantProductNo of the product you wish to delete.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse ProductDelete(string merchantProductNo);

        /// <summary>
        /// Delete Product.
        /// </summary>
        /// <remarks>
        /// Delete a product based on the merchant reference.&lt;br /&gt;Note that we do not really delete a product, as the product&lt;br /&gt;might still be referenced by orders etc. Therefore, the references&lt;br /&gt;used for this product cannot be reused. We do however deactivate the product&lt;br /&gt;which means that it will not be sent to channels.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantProductNo">The MerchantProductNo of the product you wish to delete.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> ProductDeleteWithHttpInfo(string merchantProductNo);
        /// <summary>
        /// Get Products.
        /// </summary>
        /// <remarks>
        /// Retrieve all products.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Search product(s) by Name, MerchantProductNo, Ean or Brand&lt;br /&gt;This search is applied to the result after applying the other filters. (optional)</param>
        /// <param name="eanList">Search products by submitting a list of EAN&#39;s. (optional)</param>
        /// <param name="merchantProductNoList">Search products by submitting a list of MerchantProductNo&#39;s. (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <returns>CollectionOfMerchantProductResponse</returns>
        CollectionOfMerchantProductResponse ProductGetByFilter(string search = default(string), List<string> eanList = default(List<string>), List<string> merchantProductNoList = default(List<string>), int? page = default(int?));

        /// <summary>
        /// Get Products.
        /// </summary>
        /// <remarks>
        /// Retrieve all products.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Search product(s) by Name, MerchantProductNo, Ean or Brand&lt;br /&gt;This search is applied to the result after applying the other filters. (optional)</param>
        /// <param name="eanList">Search products by submitting a list of EAN&#39;s. (optional)</param>
        /// <param name="merchantProductNoList">Search products by submitting a list of MerchantProductNo&#39;s. (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <returns>ApiResponse of CollectionOfMerchantProductResponse</returns>
        ApiResponse<CollectionOfMerchantProductResponse> ProductGetByFilterWithHttpInfo(string search = default(string), List<string> eanList = default(List<string>), List<string> merchantProductNoList = default(List<string>), int? page = default(int?));
        /// <summary>
        /// Get Product.
        /// </summary>
        /// <remarks>
        /// Retrieve a product based on the merchant reference.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantProductNo">The unique product reference used by the Merchant (sku).</param>
        /// <returns>SingleOfMerchantProductResponse</returns>
        SingleOfMerchantProductResponse ProductGetByMerchantProductNo(string merchantProductNo);

        /// <summary>
        /// Get Product.
        /// </summary>
        /// <remarks>
        /// Retrieve a product based on the merchant reference.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantProductNo">The unique product reference used by the Merchant (sku).</param>
        /// <returns>ApiResponse of SingleOfMerchantProductResponse</returns>
        ApiResponse<SingleOfMerchantProductResponse> ProductGetByMerchantProductNoWithHttpInfo(string merchantProductNo);
        /// <summary>
        /// Patch product
        /// </summary>
        /// <remarks>
        /// Patch products. This endpoint allows you to update single fields on a product using patch operations,&lt;br /&gt;without having to supply the other product information.&lt;br /&gt;&lt;br /&gt;The format of this endpoint is a JsonPatchDocument. Examples of how this format works can be found here:&lt;br /&gt;http://jsonpatch.com/&lt;br /&gt; &lt;br /&gt;It&#39;s not possible to nest parent and children more than one level (A parent can have many children,&lt;br /&gt;but any child cannot itself also have children).&lt;br /&gt; &lt;br /&gt;The supplied MerchantProductNo needs to be unique.&lt;br /&gt;&lt;br /&gt; &lt;br /&gt;ExtraData used as translations is ignored and cannot be changed.&lt;br /&gt;&lt;br /&gt;Sample request:&lt;br /&gt; &lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;value\&quot;: \&quot;Value\&quot;,&lt;br /&gt; \&quot;path\&quot;: \&quot;Name\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;replace\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;Adding ExtraData:&lt;br /&gt;&lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;value\&quot;: {\&quot;key\&quot;: \&quot;Key1\&quot;, \&quot;value\&quot;: \&quot;value1\&quot;},&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData/0\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;add\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;Replacing ExtraData (will replace entire ExtraData collection):&lt;br /&gt;&lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;value\&quot;: [{\&quot;key\&quot;: \&quot;Key1\&quot;, \&quot;value\&quot;: \&quot;value1\&quot;}],&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;replace\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;Removing all ExtraData:&lt;br /&gt;&lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;replace\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; Or:&lt;br /&gt; &lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;remove\&quot;&lt;br /&gt; }
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantProductNo">The MerchantProductNo of the product you wish to patch</param>
        /// <param name="operation">The JsonPatchDocument providing the operations you wish to perform on the product. &lt;br /&gt; Value contains the value you wish to set on the property you&#39;re updating (used with operations \&quot;add\&quot; and \&quot;replace\&quot;).&lt;br /&gt; Path contains the path to the property you&#39;re updating (e.g. Description). Every property in the model used for creation an updating can be used.&lt;br /&gt; Op contains the operation you wish to perform (\&quot;add\&quot;,\&quot;replace\&quot;,\&quot;remove\&quot;).&lt;br /&gt; From is only used when using the \&quot;move\&quot; operation. It refers to the source path of the value to be moved. (optional)</param>
        /// <returns>SingleOfProductCreationResult</returns>
        SingleOfProductCreationResult ProductPatch(string merchantProductNo, List<Operation> operation = default(List<Operation>));

        /// <summary>
        /// Patch product
        /// </summary>
        /// <remarks>
        /// Patch products. This endpoint allows you to update single fields on a product using patch operations,&lt;br /&gt;without having to supply the other product information.&lt;br /&gt;&lt;br /&gt;The format of this endpoint is a JsonPatchDocument. Examples of how this format works can be found here:&lt;br /&gt;http://jsonpatch.com/&lt;br /&gt; &lt;br /&gt;It&#39;s not possible to nest parent and children more than one level (A parent can have many children,&lt;br /&gt;but any child cannot itself also have children).&lt;br /&gt; &lt;br /&gt;The supplied MerchantProductNo needs to be unique.&lt;br /&gt;&lt;br /&gt; &lt;br /&gt;ExtraData used as translations is ignored and cannot be changed.&lt;br /&gt;&lt;br /&gt;Sample request:&lt;br /&gt; &lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;value\&quot;: \&quot;Value\&quot;,&lt;br /&gt; \&quot;path\&quot;: \&quot;Name\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;replace\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;Adding ExtraData:&lt;br /&gt;&lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;value\&quot;: {\&quot;key\&quot;: \&quot;Key1\&quot;, \&quot;value\&quot;: \&quot;value1\&quot;},&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData/0\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;add\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;Replacing ExtraData (will replace entire ExtraData collection):&lt;br /&gt;&lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;value\&quot;: [{\&quot;key\&quot;: \&quot;Key1\&quot;, \&quot;value\&quot;: \&quot;value1\&quot;}],&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;replace\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;Removing all ExtraData:&lt;br /&gt;&lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;replace\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; Or:&lt;br /&gt; &lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;remove\&quot;&lt;br /&gt; }
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantProductNo">The MerchantProductNo of the product you wish to patch</param>
        /// <param name="operation">The JsonPatchDocument providing the operations you wish to perform on the product. &lt;br /&gt; Value contains the value you wish to set on the property you&#39;re updating (used with operations \&quot;add\&quot; and \&quot;replace\&quot;).&lt;br /&gt; Path contains the path to the property you&#39;re updating (e.g. Description). Every property in the model used for creation an updating can be used.&lt;br /&gt; Op contains the operation you wish to perform (\&quot;add\&quot;,\&quot;replace\&quot;,\&quot;remove\&quot;).&lt;br /&gt; From is only used when using the \&quot;move\&quot; operation. It refers to the source path of the value to be moved. (optional)</param>
        /// <returns>ApiResponse of SingleOfProductCreationResult</returns>
        ApiResponse<SingleOfProductCreationResult> ProductPatchWithHttpInfo(string merchantProductNo, List<Operation> operation = default(List<Operation>));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete multiple Products.
        /// </summary>
        /// <remarks>
        /// Delete the products based on the merchant references.&lt;br /&gt;Note that we do not really delete products, as the products&lt;br /&gt;might still be referenced by orders. Therefore, the references&lt;br /&gt;used for these products cannot be reused. We do however deactivate the products&lt;br /&gt;which means that they will not be sent to channels.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">The list of MerchantProductNo of the products you wish to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> ProductBulkDeleteAsync(List<string> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete multiple Products.
        /// </summary>
        /// <remarks>
        /// Delete the products based on the merchant references.&lt;br /&gt;Note that we do not really delete products, as the products&lt;br /&gt;might still be referenced by orders. Therefore, the references&lt;br /&gt;used for these products cannot be reused. We do however deactivate the products&lt;br /&gt;which means that they will not be sent to channels.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">The list of MerchantProductNo of the products you wish to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ProductBulkDeleteWithHttpInfoAsync(List<string> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Bulk Patch Products
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to update multiple fields on a multiple products.&lt;br /&gt;Products sent in a request can only be updated for the fields listed in object &#39;PropertiesToUpdate&#39;. &lt;br /&gt;In other words, you specify which products you want to update and which fields should be updated for all products.&lt;br /&gt;&lt;br /&gt;Sample request:&lt;br /&gt;&lt;br /&gt; PATCH /v2/products&lt;br /&gt; {&lt;br /&gt; \&quot;PropertiesToUpdate\&quot;: [&lt;br /&gt; \&quot;name\&quot;,&lt;br /&gt; \&quot;description\&quot;&lt;br /&gt; ],&lt;br /&gt; \&quot;MerchantProductRequestModels\&quot;: [&lt;br /&gt; {&lt;br /&gt; \&quot;MerchantProductNo\&quot;: \&quot;testMerchantProductNo\&quot;,&lt;br /&gt; \&quot;Name\&quot;: \&quot;testName\&quot;,&lt;br /&gt; \&quot;Description\&quot;: \&quot;testDescription\&quot;,&lt;br /&gt; },&lt;br /&gt; {&lt;br /&gt; \&quot;MerchantProductNo\&quot;: \&quot;testMerchantProductNo2\&quot;,&lt;br /&gt; \&quot;Name\&quot;: \&quot;testName3\&quot;,&lt;br /&gt; \&quot;Description\&quot;: \&quot;testDescription1\&quot;,&lt;br /&gt; }&lt;br /&gt; ]&lt;br /&gt; }
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patchMerchantProductDto">1) PropertiesToUpdate: Fields to update&lt;br /&gt;2) MerchantProductRequestModels: Products to be updated (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleOfProductCreationResult</returns>
        System.Threading.Tasks.Task<SingleOfProductCreationResult> ProductBulkPatchAsync(PatchMerchantProductDto patchMerchantProductDto = default(PatchMerchantProductDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Bulk Patch Products
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to update multiple fields on a multiple products.&lt;br /&gt;Products sent in a request can only be updated for the fields listed in object &#39;PropertiesToUpdate&#39;. &lt;br /&gt;In other words, you specify which products you want to update and which fields should be updated for all products.&lt;br /&gt;&lt;br /&gt;Sample request:&lt;br /&gt;&lt;br /&gt; PATCH /v2/products&lt;br /&gt; {&lt;br /&gt; \&quot;PropertiesToUpdate\&quot;: [&lt;br /&gt; \&quot;name\&quot;,&lt;br /&gt; \&quot;description\&quot;&lt;br /&gt; ],&lt;br /&gt; \&quot;MerchantProductRequestModels\&quot;: [&lt;br /&gt; {&lt;br /&gt; \&quot;MerchantProductNo\&quot;: \&quot;testMerchantProductNo\&quot;,&lt;br /&gt; \&quot;Name\&quot;: \&quot;testName\&quot;,&lt;br /&gt; \&quot;Description\&quot;: \&quot;testDescription\&quot;,&lt;br /&gt; },&lt;br /&gt; {&lt;br /&gt; \&quot;MerchantProductNo\&quot;: \&quot;testMerchantProductNo2\&quot;,&lt;br /&gt; \&quot;Name\&quot;: \&quot;testName3\&quot;,&lt;br /&gt; \&quot;Description\&quot;: \&quot;testDescription1\&quot;,&lt;br /&gt; }&lt;br /&gt; ]&lt;br /&gt; }
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patchMerchantProductDto">1) PropertiesToUpdate: Fields to update&lt;br /&gt;2) MerchantProductRequestModels: Products to be updated (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleOfProductCreationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleOfProductCreationResult>> ProductBulkPatchWithHttpInfoAsync(PatchMerchantProductDto patchMerchantProductDto = default(PatchMerchantProductDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upsert Products.
        /// </summary>
        /// <remarks>
        /// Upsert (update or create) products. The parent serves as the &#39;base&#39; product of the children.&lt;br /&gt;For example, the children could be different sizes or colors of the parent product.&lt;br /&gt;For channels where every size and color are different products this does not make any difference&lt;br /&gt;(the children will just be sent separately, while ignoring the parent).&lt;br /&gt;But there are channels where the parent and the children need to be sent together, for example&lt;br /&gt;when there is one product with a list of sizes. In this case all the product information is retrieved&lt;br /&gt;from the parent product while the size list is generated from the children.&lt;br /&gt; &lt;br /&gt;Note that the parent itself is a &#39;blueprint&#39; of the child products and we do our best to make sure it&lt;br /&gt;does not end up on the marketplaces itself. Only the children can be purchased.&lt;br /&gt; &lt;br /&gt;It&#39;s not possible to nest parent and children more than one level (A parent can have many children,&lt;br /&gt;but any child cannot itself also have children).&lt;br /&gt; &lt;br /&gt;The supplied MerchantProductNo needs to be unique.&lt;br /&gt; &lt;br /&gt;When \&quot;ignoreStock\&quot; query string parameter is set to \&quot;true\&quot;, stock will not be updated
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantProductRequest"></param>
        /// <param name="ignoreStock"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleOfProductCreationResult</returns>
        System.Threading.Tasks.Task<SingleOfProductCreationResult> ProductCreateAsync(List<MerchantProductRequest> merchantProductRequest, bool? ignoreStock = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upsert Products.
        /// </summary>
        /// <remarks>
        /// Upsert (update or create) products. The parent serves as the &#39;base&#39; product of the children.&lt;br /&gt;For example, the children could be different sizes or colors of the parent product.&lt;br /&gt;For channels where every size and color are different products this does not make any difference&lt;br /&gt;(the children will just be sent separately, while ignoring the parent).&lt;br /&gt;But there are channels where the parent and the children need to be sent together, for example&lt;br /&gt;when there is one product with a list of sizes. In this case all the product information is retrieved&lt;br /&gt;from the parent product while the size list is generated from the children.&lt;br /&gt; &lt;br /&gt;Note that the parent itself is a &#39;blueprint&#39; of the child products and we do our best to make sure it&lt;br /&gt;does not end up on the marketplaces itself. Only the children can be purchased.&lt;br /&gt; &lt;br /&gt;It&#39;s not possible to nest parent and children more than one level (A parent can have many children,&lt;br /&gt;but any child cannot itself also have children).&lt;br /&gt; &lt;br /&gt;The supplied MerchantProductNo needs to be unique.&lt;br /&gt; &lt;br /&gt;When \&quot;ignoreStock\&quot; query string parameter is set to \&quot;true\&quot;, stock will not be updated
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantProductRequest"></param>
        /// <param name="ignoreStock"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleOfProductCreationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleOfProductCreationResult>> ProductCreateWithHttpInfoAsync(List<MerchantProductRequest> merchantProductRequest, bool? ignoreStock = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Product.
        /// </summary>
        /// <remarks>
        /// Delete a product based on the merchant reference.&lt;br /&gt;Note that we do not really delete a product, as the product&lt;br /&gt;might still be referenced by orders etc. Therefore, the references&lt;br /&gt;used for this product cannot be reused. We do however deactivate the product&lt;br /&gt;which means that it will not be sent to channels.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantProductNo">The MerchantProductNo of the product you wish to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> ProductDeleteAsync(string merchantProductNo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Product.
        /// </summary>
        /// <remarks>
        /// Delete a product based on the merchant reference.&lt;br /&gt;Note that we do not really delete a product, as the product&lt;br /&gt;might still be referenced by orders etc. Therefore, the references&lt;br /&gt;used for this product cannot be reused. We do however deactivate the product&lt;br /&gt;which means that it will not be sent to channels.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantProductNo">The MerchantProductNo of the product you wish to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ProductDeleteWithHttpInfoAsync(string merchantProductNo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Products.
        /// </summary>
        /// <remarks>
        /// Retrieve all products.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Search product(s) by Name, MerchantProductNo, Ean or Brand&lt;br /&gt;This search is applied to the result after applying the other filters. (optional)</param>
        /// <param name="eanList">Search products by submitting a list of EAN&#39;s. (optional)</param>
        /// <param name="merchantProductNoList">Search products by submitting a list of MerchantProductNo&#39;s. (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionOfMerchantProductResponse</returns>
        System.Threading.Tasks.Task<CollectionOfMerchantProductResponse> ProductGetByFilterAsync(string search = default(string), List<string> eanList = default(List<string>), List<string> merchantProductNoList = default(List<string>), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Products.
        /// </summary>
        /// <remarks>
        /// Retrieve all products.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Search product(s) by Name, MerchantProductNo, Ean or Brand&lt;br /&gt;This search is applied to the result after applying the other filters. (optional)</param>
        /// <param name="eanList">Search products by submitting a list of EAN&#39;s. (optional)</param>
        /// <param name="merchantProductNoList">Search products by submitting a list of MerchantProductNo&#39;s. (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionOfMerchantProductResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionOfMerchantProductResponse>> ProductGetByFilterWithHttpInfoAsync(string search = default(string), List<string> eanList = default(List<string>), List<string> merchantProductNoList = default(List<string>), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Product.
        /// </summary>
        /// <remarks>
        /// Retrieve a product based on the merchant reference.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantProductNo">The unique product reference used by the Merchant (sku).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleOfMerchantProductResponse</returns>
        System.Threading.Tasks.Task<SingleOfMerchantProductResponse> ProductGetByMerchantProductNoAsync(string merchantProductNo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Product.
        /// </summary>
        /// <remarks>
        /// Retrieve a product based on the merchant reference.
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantProductNo">The unique product reference used by the Merchant (sku).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleOfMerchantProductResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleOfMerchantProductResponse>> ProductGetByMerchantProductNoWithHttpInfoAsync(string merchantProductNo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Patch product
        /// </summary>
        /// <remarks>
        /// Patch products. This endpoint allows you to update single fields on a product using patch operations,&lt;br /&gt;without having to supply the other product information.&lt;br /&gt;&lt;br /&gt;The format of this endpoint is a JsonPatchDocument. Examples of how this format works can be found here:&lt;br /&gt;http://jsonpatch.com/&lt;br /&gt; &lt;br /&gt;It&#39;s not possible to nest parent and children more than one level (A parent can have many children,&lt;br /&gt;but any child cannot itself also have children).&lt;br /&gt; &lt;br /&gt;The supplied MerchantProductNo needs to be unique.&lt;br /&gt;&lt;br /&gt; &lt;br /&gt;ExtraData used as translations is ignored and cannot be changed.&lt;br /&gt;&lt;br /&gt;Sample request:&lt;br /&gt; &lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;value\&quot;: \&quot;Value\&quot;,&lt;br /&gt; \&quot;path\&quot;: \&quot;Name\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;replace\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;Adding ExtraData:&lt;br /&gt;&lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;value\&quot;: {\&quot;key\&quot;: \&quot;Key1\&quot;, \&quot;value\&quot;: \&quot;value1\&quot;},&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData/0\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;add\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;Replacing ExtraData (will replace entire ExtraData collection):&lt;br /&gt;&lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;value\&quot;: [{\&quot;key\&quot;: \&quot;Key1\&quot;, \&quot;value\&quot;: \&quot;value1\&quot;}],&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;replace\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;Removing all ExtraData:&lt;br /&gt;&lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;replace\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; Or:&lt;br /&gt; &lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;remove\&quot;&lt;br /&gt; }
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantProductNo">The MerchantProductNo of the product you wish to patch</param>
        /// <param name="operation">The JsonPatchDocument providing the operations you wish to perform on the product. &lt;br /&gt; Value contains the value you wish to set on the property you&#39;re updating (used with operations \&quot;add\&quot; and \&quot;replace\&quot;).&lt;br /&gt; Path contains the path to the property you&#39;re updating (e.g. Description). Every property in the model used for creation an updating can be used.&lt;br /&gt; Op contains the operation you wish to perform (\&quot;add\&quot;,\&quot;replace\&quot;,\&quot;remove\&quot;).&lt;br /&gt; From is only used when using the \&quot;move\&quot; operation. It refers to the source path of the value to be moved. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleOfProductCreationResult</returns>
        System.Threading.Tasks.Task<SingleOfProductCreationResult> ProductPatchAsync(string merchantProductNo, List<Operation> operation = default(List<Operation>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Patch product
        /// </summary>
        /// <remarks>
        /// Patch products. This endpoint allows you to update single fields on a product using patch operations,&lt;br /&gt;without having to supply the other product information.&lt;br /&gt;&lt;br /&gt;The format of this endpoint is a JsonPatchDocument. Examples of how this format works can be found here:&lt;br /&gt;http://jsonpatch.com/&lt;br /&gt; &lt;br /&gt;It&#39;s not possible to nest parent and children more than one level (A parent can have many children,&lt;br /&gt;but any child cannot itself also have children).&lt;br /&gt; &lt;br /&gt;The supplied MerchantProductNo needs to be unique.&lt;br /&gt;&lt;br /&gt; &lt;br /&gt;ExtraData used as translations is ignored and cannot be changed.&lt;br /&gt;&lt;br /&gt;Sample request:&lt;br /&gt; &lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;value\&quot;: \&quot;Value\&quot;,&lt;br /&gt; \&quot;path\&quot;: \&quot;Name\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;replace\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;Adding ExtraData:&lt;br /&gt;&lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;value\&quot;: {\&quot;key\&quot;: \&quot;Key1\&quot;, \&quot;value\&quot;: \&quot;value1\&quot;},&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData/0\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;add\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;Replacing ExtraData (will replace entire ExtraData collection):&lt;br /&gt;&lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;value\&quot;: [{\&quot;key\&quot;: \&quot;Key1\&quot;, \&quot;value\&quot;: \&quot;value1\&quot;}],&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;replace\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;Removing all ExtraData:&lt;br /&gt;&lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;replace\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; Or:&lt;br /&gt; &lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;remove\&quot;&lt;br /&gt; }
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantProductNo">The MerchantProductNo of the product you wish to patch</param>
        /// <param name="operation">The JsonPatchDocument providing the operations you wish to perform on the product. &lt;br /&gt; Value contains the value you wish to set on the property you&#39;re updating (used with operations \&quot;add\&quot; and \&quot;replace\&quot;).&lt;br /&gt; Path contains the path to the property you&#39;re updating (e.g. Description). Every property in the model used for creation an updating can be used.&lt;br /&gt; Op contains the operation you wish to perform (\&quot;add\&quot;,\&quot;replace\&quot;,\&quot;remove\&quot;).&lt;br /&gt; From is only used when using the \&quot;move\&quot; operation. It refers to the source path of the value to be moved. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleOfProductCreationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleOfProductCreationResult>> ProductPatchWithHttpInfoAsync(string merchantProductNo, List<Operation> operation = default(List<Operation>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductApi : IProductApiSync, IProductApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductApi : IProductApi
    {
        private ChannelEngine.Merchant.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductApi(string basePath)
        {
            this.Configuration = ChannelEngine.Merchant.ApiClient.Client.Configuration.MergeConfigurations(
                ChannelEngine.Merchant.ApiClient.Client.GlobalConfiguration.Instance,
                new ChannelEngine.Merchant.ApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ChannelEngine.Merchant.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ChannelEngine.Merchant.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ChannelEngine.Merchant.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProductApi(ChannelEngine.Merchant.ApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ChannelEngine.Merchant.ApiClient.Client.Configuration.MergeConfigurations(
                ChannelEngine.Merchant.ApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ChannelEngine.Merchant.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ChannelEngine.Merchant.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ChannelEngine.Merchant.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ProductApi(ChannelEngine.Merchant.ApiClient.Client.ISynchronousClient client, ChannelEngine.Merchant.ApiClient.Client.IAsynchronousClient asyncClient, ChannelEngine.Merchant.ApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ChannelEngine.Merchant.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ChannelEngine.Merchant.ApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ChannelEngine.Merchant.ApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ChannelEngine.Merchant.ApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ChannelEngine.Merchant.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete multiple Products. Delete the products based on the merchant references.&lt;br /&gt;Note that we do not really delete products, as the products&lt;br /&gt;might still be referenced by orders. Therefore, the references&lt;br /&gt;used for these products cannot be reused. We do however deactivate the products&lt;br /&gt;which means that they will not be sent to channels.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">The list of MerchantProductNo of the products you wish to delete.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse ProductBulkDelete(List<string> requestBody)
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse> localVarResponse = ProductBulkDeleteWithHttpInfo(requestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete multiple Products. Delete the products based on the merchant references.&lt;br /&gt;Note that we do not really delete products, as the products&lt;br /&gt;might still be referenced by orders. Therefore, the references&lt;br /&gt;used for these products cannot be reused. We do however deactivate the products&lt;br /&gt;which means that they will not be sent to channels.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">The list of MerchantProductNo of the products you wish to delete.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse> ProductBulkDeleteWithHttpInfo(List<string> requestBody)
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
                throw new ChannelEngine.Merchant.ApiClient.Client.ApiException(400, "Missing required parameter 'requestBody' when calling ProductApi->ProductBulkDelete");

            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestBody;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/v2/products/bulkdelete", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductBulkDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete multiple Products. Delete the products based on the merchant references.&lt;br /&gt;Note that we do not really delete products, as the products&lt;br /&gt;might still be referenced by orders. Therefore, the references&lt;br /&gt;used for these products cannot be reused. We do however deactivate the products&lt;br /&gt;which means that they will not be sent to channels.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">The list of MerchantProductNo of the products you wish to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> ProductBulkDeleteAsync(List<string> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse> localVarResponse = await ProductBulkDeleteWithHttpInfoAsync(requestBody, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete multiple Products. Delete the products based on the merchant references.&lt;br /&gt;Note that we do not really delete products, as the products&lt;br /&gt;might still be referenced by orders. Therefore, the references&lt;br /&gt;used for these products cannot be reused. We do however deactivate the products&lt;br /&gt;which means that they will not be sent to channels.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">The list of MerchantProductNo of the products you wish to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse>> ProductBulkDeleteWithHttpInfoAsync(List<string> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
                throw new ChannelEngine.Merchant.ApiClient.Client.ApiException(400, "Missing required parameter 'requestBody' when calling ProductApi->ProductBulkDelete");


            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestBody;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/v2/products/bulkdelete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductBulkDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Bulk Patch Products This endpoint allows you to update multiple fields on a multiple products.&lt;br /&gt;Products sent in a request can only be updated for the fields listed in object &#39;PropertiesToUpdate&#39;. &lt;br /&gt;In other words, you specify which products you want to update and which fields should be updated for all products.&lt;br /&gt;&lt;br /&gt;Sample request:&lt;br /&gt;&lt;br /&gt; PATCH /v2/products&lt;br /&gt; {&lt;br /&gt; \&quot;PropertiesToUpdate\&quot;: [&lt;br /&gt; \&quot;name\&quot;,&lt;br /&gt; \&quot;description\&quot;&lt;br /&gt; ],&lt;br /&gt; \&quot;MerchantProductRequestModels\&quot;: [&lt;br /&gt; {&lt;br /&gt; \&quot;MerchantProductNo\&quot;: \&quot;testMerchantProductNo\&quot;,&lt;br /&gt; \&quot;Name\&quot;: \&quot;testName\&quot;,&lt;br /&gt; \&quot;Description\&quot;: \&quot;testDescription\&quot;,&lt;br /&gt; },&lt;br /&gt; {&lt;br /&gt; \&quot;MerchantProductNo\&quot;: \&quot;testMerchantProductNo2\&quot;,&lt;br /&gt; \&quot;Name\&quot;: \&quot;testName3\&quot;,&lt;br /&gt; \&quot;Description\&quot;: \&quot;testDescription1\&quot;,&lt;br /&gt; }&lt;br /&gt; ]&lt;br /&gt; }
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patchMerchantProductDto">1) PropertiesToUpdate: Fields to update&lt;br /&gt;2) MerchantProductRequestModels: Products to be updated (optional)</param>
        /// <returns>SingleOfProductCreationResult</returns>
        public SingleOfProductCreationResult ProductBulkPatch(PatchMerchantProductDto patchMerchantProductDto = default(PatchMerchantProductDto))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<SingleOfProductCreationResult> localVarResponse = ProductBulkPatchWithHttpInfo(patchMerchantProductDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk Patch Products This endpoint allows you to update multiple fields on a multiple products.&lt;br /&gt;Products sent in a request can only be updated for the fields listed in object &#39;PropertiesToUpdate&#39;. &lt;br /&gt;In other words, you specify which products you want to update and which fields should be updated for all products.&lt;br /&gt;&lt;br /&gt;Sample request:&lt;br /&gt;&lt;br /&gt; PATCH /v2/products&lt;br /&gt; {&lt;br /&gt; \&quot;PropertiesToUpdate\&quot;: [&lt;br /&gt; \&quot;name\&quot;,&lt;br /&gt; \&quot;description\&quot;&lt;br /&gt; ],&lt;br /&gt; \&quot;MerchantProductRequestModels\&quot;: [&lt;br /&gt; {&lt;br /&gt; \&quot;MerchantProductNo\&quot;: \&quot;testMerchantProductNo\&quot;,&lt;br /&gt; \&quot;Name\&quot;: \&quot;testName\&quot;,&lt;br /&gt; \&quot;Description\&quot;: \&quot;testDescription\&quot;,&lt;br /&gt; },&lt;br /&gt; {&lt;br /&gt; \&quot;MerchantProductNo\&quot;: \&quot;testMerchantProductNo2\&quot;,&lt;br /&gt; \&quot;Name\&quot;: \&quot;testName3\&quot;,&lt;br /&gt; \&quot;Description\&quot;: \&quot;testDescription1\&quot;,&lt;br /&gt; }&lt;br /&gt; ]&lt;br /&gt; }
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patchMerchantProductDto">1) PropertiesToUpdate: Fields to update&lt;br /&gt;2) MerchantProductRequestModels: Products to be updated (optional)</param>
        /// <returns>ApiResponse of SingleOfProductCreationResult</returns>
        public ChannelEngine.Merchant.ApiClient.Client.ApiResponse<SingleOfProductCreationResult> ProductBulkPatchWithHttpInfo(PatchMerchantProductDto patchMerchantProductDto = default(PatchMerchantProductDto))
        {
            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = patchMerchantProductDto;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<SingleOfProductCreationResult>("/v2/products", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductBulkPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Bulk Patch Products This endpoint allows you to update multiple fields on a multiple products.&lt;br /&gt;Products sent in a request can only be updated for the fields listed in object &#39;PropertiesToUpdate&#39;. &lt;br /&gt;In other words, you specify which products you want to update and which fields should be updated for all products.&lt;br /&gt;&lt;br /&gt;Sample request:&lt;br /&gt;&lt;br /&gt; PATCH /v2/products&lt;br /&gt; {&lt;br /&gt; \&quot;PropertiesToUpdate\&quot;: [&lt;br /&gt; \&quot;name\&quot;,&lt;br /&gt; \&quot;description\&quot;&lt;br /&gt; ],&lt;br /&gt; \&quot;MerchantProductRequestModels\&quot;: [&lt;br /&gt; {&lt;br /&gt; \&quot;MerchantProductNo\&quot;: \&quot;testMerchantProductNo\&quot;,&lt;br /&gt; \&quot;Name\&quot;: \&quot;testName\&quot;,&lt;br /&gt; \&quot;Description\&quot;: \&quot;testDescription\&quot;,&lt;br /&gt; },&lt;br /&gt; {&lt;br /&gt; \&quot;MerchantProductNo\&quot;: \&quot;testMerchantProductNo2\&quot;,&lt;br /&gt; \&quot;Name\&quot;: \&quot;testName3\&quot;,&lt;br /&gt; \&quot;Description\&quot;: \&quot;testDescription1\&quot;,&lt;br /&gt; }&lt;br /&gt; ]&lt;br /&gt; }
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patchMerchantProductDto">1) PropertiesToUpdate: Fields to update&lt;br /&gt;2) MerchantProductRequestModels: Products to be updated (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleOfProductCreationResult</returns>
        public async System.Threading.Tasks.Task<SingleOfProductCreationResult> ProductBulkPatchAsync(PatchMerchantProductDto patchMerchantProductDto = default(PatchMerchantProductDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<SingleOfProductCreationResult> localVarResponse = await ProductBulkPatchWithHttpInfoAsync(patchMerchantProductDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk Patch Products This endpoint allows you to update multiple fields on a multiple products.&lt;br /&gt;Products sent in a request can only be updated for the fields listed in object &#39;PropertiesToUpdate&#39;. &lt;br /&gt;In other words, you specify which products you want to update and which fields should be updated for all products.&lt;br /&gt;&lt;br /&gt;Sample request:&lt;br /&gt;&lt;br /&gt; PATCH /v2/products&lt;br /&gt; {&lt;br /&gt; \&quot;PropertiesToUpdate\&quot;: [&lt;br /&gt; \&quot;name\&quot;,&lt;br /&gt; \&quot;description\&quot;&lt;br /&gt; ],&lt;br /&gt; \&quot;MerchantProductRequestModels\&quot;: [&lt;br /&gt; {&lt;br /&gt; \&quot;MerchantProductNo\&quot;: \&quot;testMerchantProductNo\&quot;,&lt;br /&gt; \&quot;Name\&quot;: \&quot;testName\&quot;,&lt;br /&gt; \&quot;Description\&quot;: \&quot;testDescription\&quot;,&lt;br /&gt; },&lt;br /&gt; {&lt;br /&gt; \&quot;MerchantProductNo\&quot;: \&quot;testMerchantProductNo2\&quot;,&lt;br /&gt; \&quot;Name\&quot;: \&quot;testName3\&quot;,&lt;br /&gt; \&quot;Description\&quot;: \&quot;testDescription1\&quot;,&lt;br /&gt; }&lt;br /&gt; ]&lt;br /&gt; }
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patchMerchantProductDto">1) PropertiesToUpdate: Fields to update&lt;br /&gt;2) MerchantProductRequestModels: Products to be updated (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleOfProductCreationResult)</returns>
        public async System.Threading.Tasks.Task<ChannelEngine.Merchant.ApiClient.Client.ApiResponse<SingleOfProductCreationResult>> ProductBulkPatchWithHttpInfoAsync(PatchMerchantProductDto patchMerchantProductDto = default(PatchMerchantProductDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = patchMerchantProductDto;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<SingleOfProductCreationResult>("/v2/products", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductBulkPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upsert Products. Upsert (update or create) products. The parent serves as the &#39;base&#39; product of the children.&lt;br /&gt;For example, the children could be different sizes or colors of the parent product.&lt;br /&gt;For channels where every size and color are different products this does not make any difference&lt;br /&gt;(the children will just be sent separately, while ignoring the parent).&lt;br /&gt;But there are channels where the parent and the children need to be sent together, for example&lt;br /&gt;when there is one product with a list of sizes. In this case all the product information is retrieved&lt;br /&gt;from the parent product while the size list is generated from the children.&lt;br /&gt; &lt;br /&gt;Note that the parent itself is a &#39;blueprint&#39; of the child products and we do our best to make sure it&lt;br /&gt;does not end up on the marketplaces itself. Only the children can be purchased.&lt;br /&gt; &lt;br /&gt;It&#39;s not possible to nest parent and children more than one level (A parent can have many children,&lt;br /&gt;but any child cannot itself also have children).&lt;br /&gt; &lt;br /&gt;The supplied MerchantProductNo needs to be unique.&lt;br /&gt; &lt;br /&gt;When \&quot;ignoreStock\&quot; query string parameter is set to \&quot;true\&quot;, stock will not be updated
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantProductRequest"></param>
        /// <param name="ignoreStock"> (optional, default to false)</param>
        /// <returns>SingleOfProductCreationResult</returns>
        public SingleOfProductCreationResult ProductCreate(List<MerchantProductRequest> merchantProductRequest, bool? ignoreStock = default(bool?))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<SingleOfProductCreationResult> localVarResponse = ProductCreateWithHttpInfo(merchantProductRequest, ignoreStock);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upsert Products. Upsert (update or create) products. The parent serves as the &#39;base&#39; product of the children.&lt;br /&gt;For example, the children could be different sizes or colors of the parent product.&lt;br /&gt;For channels where every size and color are different products this does not make any difference&lt;br /&gt;(the children will just be sent separately, while ignoring the parent).&lt;br /&gt;But there are channels where the parent and the children need to be sent together, for example&lt;br /&gt;when there is one product with a list of sizes. In this case all the product information is retrieved&lt;br /&gt;from the parent product while the size list is generated from the children.&lt;br /&gt; &lt;br /&gt;Note that the parent itself is a &#39;blueprint&#39; of the child products and we do our best to make sure it&lt;br /&gt;does not end up on the marketplaces itself. Only the children can be purchased.&lt;br /&gt; &lt;br /&gt;It&#39;s not possible to nest parent and children more than one level (A parent can have many children,&lt;br /&gt;but any child cannot itself also have children).&lt;br /&gt; &lt;br /&gt;The supplied MerchantProductNo needs to be unique.&lt;br /&gt; &lt;br /&gt;When \&quot;ignoreStock\&quot; query string parameter is set to \&quot;true\&quot;, stock will not be updated
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantProductRequest"></param>
        /// <param name="ignoreStock"> (optional, default to false)</param>
        /// <returns>ApiResponse of SingleOfProductCreationResult</returns>
        public ChannelEngine.Merchant.ApiClient.Client.ApiResponse<SingleOfProductCreationResult> ProductCreateWithHttpInfo(List<MerchantProductRequest> merchantProductRequest, bool? ignoreStock = default(bool?))
        {
            // verify the required parameter 'merchantProductRequest' is set
            if (merchantProductRequest == null)
                throw new ChannelEngine.Merchant.ApiClient.Client.ApiException(400, "Missing required parameter 'merchantProductRequest' when calling ProductApi->ProductCreate");

            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ignoreStock != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "ignoreStock", ignoreStock));
            }
            localVarRequestOptions.Data = merchantProductRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SingleOfProductCreationResult>("/v2/products", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upsert Products. Upsert (update or create) products. The parent serves as the &#39;base&#39; product of the children.&lt;br /&gt;For example, the children could be different sizes or colors of the parent product.&lt;br /&gt;For channels where every size and color are different products this does not make any difference&lt;br /&gt;(the children will just be sent separately, while ignoring the parent).&lt;br /&gt;But there are channels where the parent and the children need to be sent together, for example&lt;br /&gt;when there is one product with a list of sizes. In this case all the product information is retrieved&lt;br /&gt;from the parent product while the size list is generated from the children.&lt;br /&gt; &lt;br /&gt;Note that the parent itself is a &#39;blueprint&#39; of the child products and we do our best to make sure it&lt;br /&gt;does not end up on the marketplaces itself. Only the children can be purchased.&lt;br /&gt; &lt;br /&gt;It&#39;s not possible to nest parent and children more than one level (A parent can have many children,&lt;br /&gt;but any child cannot itself also have children).&lt;br /&gt; &lt;br /&gt;The supplied MerchantProductNo needs to be unique.&lt;br /&gt; &lt;br /&gt;When \&quot;ignoreStock\&quot; query string parameter is set to \&quot;true\&quot;, stock will not be updated
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantProductRequest"></param>
        /// <param name="ignoreStock"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleOfProductCreationResult</returns>
        public async System.Threading.Tasks.Task<SingleOfProductCreationResult> ProductCreateAsync(List<MerchantProductRequest> merchantProductRequest, bool? ignoreStock = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<SingleOfProductCreationResult> localVarResponse = await ProductCreateWithHttpInfoAsync(merchantProductRequest, ignoreStock, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upsert Products. Upsert (update or create) products. The parent serves as the &#39;base&#39; product of the children.&lt;br /&gt;For example, the children could be different sizes or colors of the parent product.&lt;br /&gt;For channels where every size and color are different products this does not make any difference&lt;br /&gt;(the children will just be sent separately, while ignoring the parent).&lt;br /&gt;But there are channels where the parent and the children need to be sent together, for example&lt;br /&gt;when there is one product with a list of sizes. In this case all the product information is retrieved&lt;br /&gt;from the parent product while the size list is generated from the children.&lt;br /&gt; &lt;br /&gt;Note that the parent itself is a &#39;blueprint&#39; of the child products and we do our best to make sure it&lt;br /&gt;does not end up on the marketplaces itself. Only the children can be purchased.&lt;br /&gt; &lt;br /&gt;It&#39;s not possible to nest parent and children more than one level (A parent can have many children,&lt;br /&gt;but any child cannot itself also have children).&lt;br /&gt; &lt;br /&gt;The supplied MerchantProductNo needs to be unique.&lt;br /&gt; &lt;br /&gt;When \&quot;ignoreStock\&quot; query string parameter is set to \&quot;true\&quot;, stock will not be updated
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantProductRequest"></param>
        /// <param name="ignoreStock"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleOfProductCreationResult)</returns>
        public async System.Threading.Tasks.Task<ChannelEngine.Merchant.ApiClient.Client.ApiResponse<SingleOfProductCreationResult>> ProductCreateWithHttpInfoAsync(List<MerchantProductRequest> merchantProductRequest, bool? ignoreStock = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'merchantProductRequest' is set
            if (merchantProductRequest == null)
                throw new ChannelEngine.Merchant.ApiClient.Client.ApiException(400, "Missing required parameter 'merchantProductRequest' when calling ProductApi->ProductCreate");


            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ignoreStock != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "ignoreStock", ignoreStock));
            }
            localVarRequestOptions.Data = merchantProductRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SingleOfProductCreationResult>("/v2/products", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Product. Delete a product based on the merchant reference.&lt;br /&gt;Note that we do not really delete a product, as the product&lt;br /&gt;might still be referenced by orders etc. Therefore, the references&lt;br /&gt;used for this product cannot be reused. We do however deactivate the product&lt;br /&gt;which means that it will not be sent to channels.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantProductNo">The MerchantProductNo of the product you wish to delete.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse ProductDelete(string merchantProductNo)
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse> localVarResponse = ProductDeleteWithHttpInfo(merchantProductNo);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Product. Delete a product based on the merchant reference.&lt;br /&gt;Note that we do not really delete a product, as the product&lt;br /&gt;might still be referenced by orders etc. Therefore, the references&lt;br /&gt;used for this product cannot be reused. We do however deactivate the product&lt;br /&gt;which means that it will not be sent to channels.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantProductNo">The MerchantProductNo of the product you wish to delete.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse> ProductDeleteWithHttpInfo(string merchantProductNo)
        {
            // verify the required parameter 'merchantProductNo' is set
            if (merchantProductNo == null)
                throw new ChannelEngine.Merchant.ApiClient.Client.ApiException(400, "Missing required parameter 'merchantProductNo' when calling ProductApi->ProductDelete");

            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("merchantProductNo", ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToString(merchantProductNo)); // path parameter

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiResponse>("/v2/products/{merchantProductNo}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Product. Delete a product based on the merchant reference.&lt;br /&gt;Note that we do not really delete a product, as the product&lt;br /&gt;might still be referenced by orders etc. Therefore, the references&lt;br /&gt;used for this product cannot be reused. We do however deactivate the product&lt;br /&gt;which means that it will not be sent to channels.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantProductNo">The MerchantProductNo of the product you wish to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> ProductDeleteAsync(string merchantProductNo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse> localVarResponse = await ProductDeleteWithHttpInfoAsync(merchantProductNo, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Product. Delete a product based on the merchant reference.&lt;br /&gt;Note that we do not really delete a product, as the product&lt;br /&gt;might still be referenced by orders etc. Therefore, the references&lt;br /&gt;used for this product cannot be reused. We do however deactivate the product&lt;br /&gt;which means that it will not be sent to channels.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantProductNo">The MerchantProductNo of the product you wish to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<ChannelEngine.Merchant.ApiClient.Client.ApiResponse<ApiResponse>> ProductDeleteWithHttpInfoAsync(string merchantProductNo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'merchantProductNo' is set
            if (merchantProductNo == null)
                throw new ChannelEngine.Merchant.ApiClient.Client.ApiException(400, "Missing required parameter 'merchantProductNo' when calling ProductApi->ProductDelete");


            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("merchantProductNo", ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToString(merchantProductNo)); // path parameter

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiResponse>("/v2/products/{merchantProductNo}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Products. Retrieve all products.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Search product(s) by Name, MerchantProductNo, Ean or Brand&lt;br /&gt;This search is applied to the result after applying the other filters. (optional)</param>
        /// <param name="eanList">Search products by submitting a list of EAN&#39;s. (optional)</param>
        /// <param name="merchantProductNoList">Search products by submitting a list of MerchantProductNo&#39;s. (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <returns>CollectionOfMerchantProductResponse</returns>
        public CollectionOfMerchantProductResponse ProductGetByFilter(string search = default(string), List<string> eanList = default(List<string>), List<string> merchantProductNoList = default(List<string>), int? page = default(int?))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantProductResponse> localVarResponse = ProductGetByFilterWithHttpInfo(search, eanList, merchantProductNoList, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Products. Retrieve all products.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Search product(s) by Name, MerchantProductNo, Ean or Brand&lt;br /&gt;This search is applied to the result after applying the other filters. (optional)</param>
        /// <param name="eanList">Search products by submitting a list of EAN&#39;s. (optional)</param>
        /// <param name="merchantProductNoList">Search products by submitting a list of MerchantProductNo&#39;s. (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <returns>ApiResponse of CollectionOfMerchantProductResponse</returns>
        public ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantProductResponse> ProductGetByFilterWithHttpInfo(string search = default(string), List<string> eanList = default(List<string>), List<string> merchantProductNoList = default(List<string>), int? page = default(int?))
        {
            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (eanList != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "eanList", eanList));
            }
            if (merchantProductNoList != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "merchantProductNoList", merchantProductNoList));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionOfMerchantProductResponse>("/v2/products", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductGetByFilter", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Products. Retrieve all products.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Search product(s) by Name, MerchantProductNo, Ean or Brand&lt;br /&gt;This search is applied to the result after applying the other filters. (optional)</param>
        /// <param name="eanList">Search products by submitting a list of EAN&#39;s. (optional)</param>
        /// <param name="merchantProductNoList">Search products by submitting a list of MerchantProductNo&#39;s. (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionOfMerchantProductResponse</returns>
        public async System.Threading.Tasks.Task<CollectionOfMerchantProductResponse> ProductGetByFilterAsync(string search = default(string), List<string> eanList = default(List<string>), List<string> merchantProductNoList = default(List<string>), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantProductResponse> localVarResponse = await ProductGetByFilterWithHttpInfoAsync(search, eanList, merchantProductNoList, page, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Products. Retrieve all products.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Search product(s) by Name, MerchantProductNo, Ean or Brand&lt;br /&gt;This search is applied to the result after applying the other filters. (optional)</param>
        /// <param name="eanList">Search products by submitting a list of EAN&#39;s. (optional)</param>
        /// <param name="merchantProductNoList">Search products by submitting a list of MerchantProductNo&#39;s. (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionOfMerchantProductResponse)</returns>
        public async System.Threading.Tasks.Task<ChannelEngine.Merchant.ApiClient.Client.ApiResponse<CollectionOfMerchantProductResponse>> ProductGetByFilterWithHttpInfoAsync(string search = default(string), List<string> eanList = default(List<string>), List<string> merchantProductNoList = default(List<string>), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (eanList != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "eanList", eanList));
            }
            if (merchantProductNoList != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "merchantProductNoList", merchantProductNoList));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionOfMerchantProductResponse>("/v2/products", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductGetByFilter", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Product. Retrieve a product based on the merchant reference.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantProductNo">The unique product reference used by the Merchant (sku).</param>
        /// <returns>SingleOfMerchantProductResponse</returns>
        public SingleOfMerchantProductResponse ProductGetByMerchantProductNo(string merchantProductNo)
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<SingleOfMerchantProductResponse> localVarResponse = ProductGetByMerchantProductNoWithHttpInfo(merchantProductNo);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Product. Retrieve a product based on the merchant reference.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantProductNo">The unique product reference used by the Merchant (sku).</param>
        /// <returns>ApiResponse of SingleOfMerchantProductResponse</returns>
        public ChannelEngine.Merchant.ApiClient.Client.ApiResponse<SingleOfMerchantProductResponse> ProductGetByMerchantProductNoWithHttpInfo(string merchantProductNo)
        {
            // verify the required parameter 'merchantProductNo' is set
            if (merchantProductNo == null)
                throw new ChannelEngine.Merchant.ApiClient.Client.ApiException(400, "Missing required parameter 'merchantProductNo' when calling ProductApi->ProductGetByMerchantProductNo");

            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("merchantProductNo", ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToString(merchantProductNo)); // path parameter

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SingleOfMerchantProductResponse>("/v2/products/{merchantProductNo}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductGetByMerchantProductNo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Product. Retrieve a product based on the merchant reference.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantProductNo">The unique product reference used by the Merchant (sku).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleOfMerchantProductResponse</returns>
        public async System.Threading.Tasks.Task<SingleOfMerchantProductResponse> ProductGetByMerchantProductNoAsync(string merchantProductNo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<SingleOfMerchantProductResponse> localVarResponse = await ProductGetByMerchantProductNoWithHttpInfoAsync(merchantProductNo, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Product. Retrieve a product based on the merchant reference.
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantProductNo">The unique product reference used by the Merchant (sku).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleOfMerchantProductResponse)</returns>
        public async System.Threading.Tasks.Task<ChannelEngine.Merchant.ApiClient.Client.ApiResponse<SingleOfMerchantProductResponse>> ProductGetByMerchantProductNoWithHttpInfoAsync(string merchantProductNo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'merchantProductNo' is set
            if (merchantProductNo == null)
                throw new ChannelEngine.Merchant.ApiClient.Client.ApiException(400, "Missing required parameter 'merchantProductNo' when calling ProductApi->ProductGetByMerchantProductNo");


            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("merchantProductNo", ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToString(merchantProductNo)); // path parameter

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SingleOfMerchantProductResponse>("/v2/products/{merchantProductNo}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductGetByMerchantProductNo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Patch product Patch products. This endpoint allows you to update single fields on a product using patch operations,&lt;br /&gt;without having to supply the other product information.&lt;br /&gt;&lt;br /&gt;The format of this endpoint is a JsonPatchDocument. Examples of how this format works can be found here:&lt;br /&gt;http://jsonpatch.com/&lt;br /&gt; &lt;br /&gt;It&#39;s not possible to nest parent and children more than one level (A parent can have many children,&lt;br /&gt;but any child cannot itself also have children).&lt;br /&gt; &lt;br /&gt;The supplied MerchantProductNo needs to be unique.&lt;br /&gt;&lt;br /&gt; &lt;br /&gt;ExtraData used as translations is ignored and cannot be changed.&lt;br /&gt;&lt;br /&gt;Sample request:&lt;br /&gt; &lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;value\&quot;: \&quot;Value\&quot;,&lt;br /&gt; \&quot;path\&quot;: \&quot;Name\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;replace\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;Adding ExtraData:&lt;br /&gt;&lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;value\&quot;: {\&quot;key\&quot;: \&quot;Key1\&quot;, \&quot;value\&quot;: \&quot;value1\&quot;},&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData/0\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;add\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;Replacing ExtraData (will replace entire ExtraData collection):&lt;br /&gt;&lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;value\&quot;: [{\&quot;key\&quot;: \&quot;Key1\&quot;, \&quot;value\&quot;: \&quot;value1\&quot;}],&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;replace\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;Removing all ExtraData:&lt;br /&gt;&lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;replace\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; Or:&lt;br /&gt; &lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;remove\&quot;&lt;br /&gt; }
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantProductNo">The MerchantProductNo of the product you wish to patch</param>
        /// <param name="operation">The JsonPatchDocument providing the operations you wish to perform on the product. &lt;br /&gt; Value contains the value you wish to set on the property you&#39;re updating (used with operations \&quot;add\&quot; and \&quot;replace\&quot;).&lt;br /&gt; Path contains the path to the property you&#39;re updating (e.g. Description). Every property in the model used for creation an updating can be used.&lt;br /&gt; Op contains the operation you wish to perform (\&quot;add\&quot;,\&quot;replace\&quot;,\&quot;remove\&quot;).&lt;br /&gt; From is only used when using the \&quot;move\&quot; operation. It refers to the source path of the value to be moved. (optional)</param>
        /// <returns>SingleOfProductCreationResult</returns>
        public SingleOfProductCreationResult ProductPatch(string merchantProductNo, List<Operation> operation = default(List<Operation>))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<SingleOfProductCreationResult> localVarResponse = ProductPatchWithHttpInfo(merchantProductNo, operation);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Patch product Patch products. This endpoint allows you to update single fields on a product using patch operations,&lt;br /&gt;without having to supply the other product information.&lt;br /&gt;&lt;br /&gt;The format of this endpoint is a JsonPatchDocument. Examples of how this format works can be found here:&lt;br /&gt;http://jsonpatch.com/&lt;br /&gt; &lt;br /&gt;It&#39;s not possible to nest parent and children more than one level (A parent can have many children,&lt;br /&gt;but any child cannot itself also have children).&lt;br /&gt; &lt;br /&gt;The supplied MerchantProductNo needs to be unique.&lt;br /&gt;&lt;br /&gt; &lt;br /&gt;ExtraData used as translations is ignored and cannot be changed.&lt;br /&gt;&lt;br /&gt;Sample request:&lt;br /&gt; &lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;value\&quot;: \&quot;Value\&quot;,&lt;br /&gt; \&quot;path\&quot;: \&quot;Name\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;replace\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;Adding ExtraData:&lt;br /&gt;&lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;value\&quot;: {\&quot;key\&quot;: \&quot;Key1\&quot;, \&quot;value\&quot;: \&quot;value1\&quot;},&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData/0\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;add\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;Replacing ExtraData (will replace entire ExtraData collection):&lt;br /&gt;&lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;value\&quot;: [{\&quot;key\&quot;: \&quot;Key1\&quot;, \&quot;value\&quot;: \&quot;value1\&quot;}],&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;replace\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;Removing all ExtraData:&lt;br /&gt;&lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;replace\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; Or:&lt;br /&gt; &lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;remove\&quot;&lt;br /&gt; }
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantProductNo">The MerchantProductNo of the product you wish to patch</param>
        /// <param name="operation">The JsonPatchDocument providing the operations you wish to perform on the product. &lt;br /&gt; Value contains the value you wish to set on the property you&#39;re updating (used with operations \&quot;add\&quot; and \&quot;replace\&quot;).&lt;br /&gt; Path contains the path to the property you&#39;re updating (e.g. Description). Every property in the model used for creation an updating can be used.&lt;br /&gt; Op contains the operation you wish to perform (\&quot;add\&quot;,\&quot;replace\&quot;,\&quot;remove\&quot;).&lt;br /&gt; From is only used when using the \&quot;move\&quot; operation. It refers to the source path of the value to be moved. (optional)</param>
        /// <returns>ApiResponse of SingleOfProductCreationResult</returns>
        public ChannelEngine.Merchant.ApiClient.Client.ApiResponse<SingleOfProductCreationResult> ProductPatchWithHttpInfo(string merchantProductNo, List<Operation> operation = default(List<Operation>))
        {
            // verify the required parameter 'merchantProductNo' is set
            if (merchantProductNo == null)
                throw new ChannelEngine.Merchant.ApiClient.Client.ApiException(400, "Missing required parameter 'merchantProductNo' when calling ProductApi->ProductPatch");

            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("merchantProductNo", ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToString(merchantProductNo)); // path parameter
            localVarRequestOptions.Data = operation;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<SingleOfProductCreationResult>("/v2/products/{merchantProductNo}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Patch product Patch products. This endpoint allows you to update single fields on a product using patch operations,&lt;br /&gt;without having to supply the other product information.&lt;br /&gt;&lt;br /&gt;The format of this endpoint is a JsonPatchDocument. Examples of how this format works can be found here:&lt;br /&gt;http://jsonpatch.com/&lt;br /&gt; &lt;br /&gt;It&#39;s not possible to nest parent and children more than one level (A parent can have many children,&lt;br /&gt;but any child cannot itself also have children).&lt;br /&gt; &lt;br /&gt;The supplied MerchantProductNo needs to be unique.&lt;br /&gt;&lt;br /&gt; &lt;br /&gt;ExtraData used as translations is ignored and cannot be changed.&lt;br /&gt;&lt;br /&gt;Sample request:&lt;br /&gt; &lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;value\&quot;: \&quot;Value\&quot;,&lt;br /&gt; \&quot;path\&quot;: \&quot;Name\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;replace\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;Adding ExtraData:&lt;br /&gt;&lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;value\&quot;: {\&quot;key\&quot;: \&quot;Key1\&quot;, \&quot;value\&quot;: \&quot;value1\&quot;},&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData/0\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;add\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;Replacing ExtraData (will replace entire ExtraData collection):&lt;br /&gt;&lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;value\&quot;: [{\&quot;key\&quot;: \&quot;Key1\&quot;, \&quot;value\&quot;: \&quot;value1\&quot;}],&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;replace\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;Removing all ExtraData:&lt;br /&gt;&lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;replace\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; Or:&lt;br /&gt; &lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;remove\&quot;&lt;br /&gt; }
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantProductNo">The MerchantProductNo of the product you wish to patch</param>
        /// <param name="operation">The JsonPatchDocument providing the operations you wish to perform on the product. &lt;br /&gt; Value contains the value you wish to set on the property you&#39;re updating (used with operations \&quot;add\&quot; and \&quot;replace\&quot;).&lt;br /&gt; Path contains the path to the property you&#39;re updating (e.g. Description). Every property in the model used for creation an updating can be used.&lt;br /&gt; Op contains the operation you wish to perform (\&quot;add\&quot;,\&quot;replace\&quot;,\&quot;remove\&quot;).&lt;br /&gt; From is only used when using the \&quot;move\&quot; operation. It refers to the source path of the value to be moved. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingleOfProductCreationResult</returns>
        public async System.Threading.Tasks.Task<SingleOfProductCreationResult> ProductPatchAsync(string merchantProductNo, List<Operation> operation = default(List<Operation>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChannelEngine.Merchant.ApiClient.Client.ApiResponse<SingleOfProductCreationResult> localVarResponse = await ProductPatchWithHttpInfoAsync(merchantProductNo, operation, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Patch product Patch products. This endpoint allows you to update single fields on a product using patch operations,&lt;br /&gt;without having to supply the other product information.&lt;br /&gt;&lt;br /&gt;The format of this endpoint is a JsonPatchDocument. Examples of how this format works can be found here:&lt;br /&gt;http://jsonpatch.com/&lt;br /&gt; &lt;br /&gt;It&#39;s not possible to nest parent and children more than one level (A parent can have many children,&lt;br /&gt;but any child cannot itself also have children).&lt;br /&gt; &lt;br /&gt;The supplied MerchantProductNo needs to be unique.&lt;br /&gt;&lt;br /&gt; &lt;br /&gt;ExtraData used as translations is ignored and cannot be changed.&lt;br /&gt;&lt;br /&gt;Sample request:&lt;br /&gt; &lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;value\&quot;: \&quot;Value\&quot;,&lt;br /&gt; \&quot;path\&quot;: \&quot;Name\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;replace\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;Adding ExtraData:&lt;br /&gt;&lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;value\&quot;: {\&quot;key\&quot;: \&quot;Key1\&quot;, \&quot;value\&quot;: \&quot;value1\&quot;},&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData/0\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;add\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;Replacing ExtraData (will replace entire ExtraData collection):&lt;br /&gt;&lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;value\&quot;: [{\&quot;key\&quot;: \&quot;Key1\&quot;, \&quot;value\&quot;: \&quot;value1\&quot;}],&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;replace\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;Removing all ExtraData:&lt;br /&gt;&lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;replace\&quot;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; Or:&lt;br /&gt; &lt;br /&gt; PATCH /v2/products/{merchantProductNo}&lt;br /&gt; {&lt;br /&gt; \&quot;path\&quot;: \&quot;extraData\&quot;,&lt;br /&gt; \&quot;op\&quot;: \&quot;remove\&quot;&lt;br /&gt; }
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantProductNo">The MerchantProductNo of the product you wish to patch</param>
        /// <param name="operation">The JsonPatchDocument providing the operations you wish to perform on the product. &lt;br /&gt; Value contains the value you wish to set on the property you&#39;re updating (used with operations \&quot;add\&quot; and \&quot;replace\&quot;).&lt;br /&gt; Path contains the path to the property you&#39;re updating (e.g. Description). Every property in the model used for creation an updating can be used.&lt;br /&gt; Op contains the operation you wish to perform (\&quot;add\&quot;,\&quot;replace\&quot;,\&quot;remove\&quot;).&lt;br /&gt; From is only used when using the \&quot;move\&quot; operation. It refers to the source path of the value to be moved. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingleOfProductCreationResult)</returns>
        public async System.Threading.Tasks.Task<ChannelEngine.Merchant.ApiClient.Client.ApiResponse<SingleOfProductCreationResult>> ProductPatchWithHttpInfoAsync(string merchantProductNo, List<Operation> operation = default(List<Operation>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'merchantProductNo' is set
            if (merchantProductNo == null)
                throw new ChannelEngine.Merchant.ApiClient.Client.ApiException(400, "Missing required parameter 'merchantProductNo' when calling ProductApi->ProductPatch");


            ChannelEngine.Merchant.ApiClient.Client.RequestOptions localVarRequestOptions = new ChannelEngine.Merchant.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ChannelEngine.Merchant.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("merchantProductNo", ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToString(merchantProductNo)); // path parameter
            localVarRequestOptions.Data = operation;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(ChannelEngine.Merchant.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<SingleOfProductCreationResult>("/v2/products/{merchantProductNo}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
